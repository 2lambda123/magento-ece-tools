diff --git a/vendor/magento/module-deploy/Console/Command/DeployStaticContentCommand.php b/vendor/magento/module-deploy/Console/Command/DeployStaticContentCommand.php
index a87fe24..e515f4e 100644
--- a/vendor/magento/module-deploy/Console/Command/DeployStaticContentCommand.php
+++ b/vendor/magento/module-deploy/Console/Command/DeployStaticContentCommand.php
@@ -15,23 +15,48 @@ use Symfony\Component\Console\Input\InputArgument;
 use Magento\Framework\App\ObjectManagerFactory;
 use Magento\Framework\ObjectManagerInterface;
 use Magento\Framework\Validator\Locale;
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface as Options;
+use Magento\Deploy\Model\DeployManager;
 
 /**
  * Deploy static content command
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class DeployStaticContentCommand extends Command
 {
     /**
      * Key for dry-run option
+     * @deprecated
+     * @see Magento\Deploy\Console\Command\DeployStaticOptionsInterface::DRY_RUN
      */
     const DRY_RUN_OPTION = 'dry-run';
 
     /**
      * Key for languages parameter
+     * @deprecated
+     * @see DeployStaticContentCommand::LANGUAGES_ARGUMENT
      */
     const LANGUAGE_OPTION = 'languages';
 
     /**
+     * Default language value
+     */
+    const DEFAULT_LANGUAGE_VALUE = 'en_US';
+
+    /**
+     * Key for languages parameter
+     */
+    const LANGUAGES_ARGUMENT = 'languages';
+
+    /**
+     * Default jobs amount
+     */
+    const DEFAULT_JOBS_AMOUNT = 4;
+
+    /** @var InputInterface */
+    private $input;
+
+    /**
      * @var Locale
      */
     private $validator;
@@ -72,6 +97,7 @@ class DeployStaticContentCommand extends Command
     /**
      * {@inheritdoc}
      * @throws \InvalidArgumentException
+     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
      */
     protected function configure()
     {
@@ -79,45 +105,340 @@ class DeployStaticContentCommand extends Command
             ->setDescription('Deploys static view files')
             ->setDefinition([
                 new InputOption(
-                    self::DRY_RUN_OPTION,
+                    Options::DRY_RUN,
                     '-d',
                     InputOption::VALUE_NONE,
                     'If specified, then no files will be actually deployed.'
                 ),
+                new InputOption(
+                    Options::NO_JAVASCRIPT,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy JavaScript files'
+                ),
+                new InputOption(
+                    Options::NO_CSS,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy CSS files.'
+                ),
+                new InputOption(
+                    Options::NO_LESS,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy LESS files.'
+                ),
+                new InputOption(
+                    Options::NO_IMAGES,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy images.'
+                ),
+                new InputOption(
+                    Options::NO_FONTS,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy font files.'
+                ),
+                new InputOption(
+                    Options::NO_HTML,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy HTML files.'
+                ),
+                new InputOption(
+                    Options::NO_MISC,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not deploy other types of files (.md, .jbf, .csv, etc...).'
+                ),
+                new InputOption(
+                    Options::NO_HTML_MINIFY,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Do not minify HTML files.'
+                ),
+                new InputOption(
+                    Options::THEME,
+                    '-t',
+                    InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,
+                    'Generate static view files for only the specified themes.',
+                    ['all']
+                ),
+                new InputOption(
+                    Options::EXCLUDE_THEME,
+                    null,
+                    InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,
+                    'Do not generate files for the specified themes.',
+                    ['none']
+                ),
+                new InputOption(
+                    Options::LANGUAGE,
+                    '-l',
+                    InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,
+                    'Generate files only for the specified languages.',
+                    ['all']
+                ),
+                new InputOption(
+                    Options::EXCLUDE_LANGUAGE,
+                    null,
+                    InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,
+                    'Do not generate files for the specified languages.',
+                    ['none']
+                ),
+                new InputOption(
+                    Options::AREA,
+                    '-a',
+                    InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,
+                    'Generate files only for the specified areas.',
+                    ['all']
+                ),
+                new InputOption(
+                    Options::EXCLUDE_AREA,
+                    null,
+                    InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL,
+                    'Do not generate files for the specified areas.',
+                    ['none']
+                ),
+                new InputOption(
+                    Options::JOBS_AMOUNT,
+                    '-j',
+                    InputOption::VALUE_OPTIONAL,
+                    'Enable parallel processing using the specified number of jobs.',
+                    self::DEFAULT_JOBS_AMOUNT
+                ),
+                new InputOption(
+                    Options::SYMLINK_LOCALE,
+                    null,
+                    InputOption::VALUE_NONE,
+                    'Create symlinks for the files of those locales, which are passed for deployment, '
+                    . 'but have no customizations'
+                ),
                 new InputArgument(
-                    self::LANGUAGE_OPTION,
+                    self::LANGUAGES_ARGUMENT,
                     InputArgument::IS_ARRAY,
-                    'List of languages you want the tool populate files for.',
-                    ['en_US']
+                    'Space-separated list of ISO-636 language codes for which to output static view files.'
                 ),
             ]);
+
         parent::configure();
     }
 
     /**
      * {@inheritdoc}
+     * @param $magentoAreas array
+     * @param $areasInclude array
+     * @param $areasExclude array
+     * @throws \InvalidArgumentException
      */
-    protected function execute(InputInterface $input, OutputInterface $output)
+    private function checkAreasInput($magentoAreas, $areasInclude, $areasExclude)
     {
-        $options = $input->getOptions();
+        if ($areasInclude[0] != 'all' && $areasExclude[0] != 'none') {
+            throw new \InvalidArgumentException(
+                '--area (-a) and --exclude-area cannot be used at the same time'
+            );
+        }
 
-        $languages = $input->getArgument(self::LANGUAGE_OPTION);
-        foreach ($languages as $lang) {
+        if ($areasInclude[0] != 'all') {
+            foreach ($areasInclude as $area) {
+                if (!in_array($area, $magentoAreas)) {
+                    throw new \InvalidArgumentException(
+                        $area .
+                        ' argument has invalid value, available areas are: ' . implode(', ', $magentoAreas)
+                    );
+                }
+            }
+        }
 
-            if (!$this->validator->isValid($lang)) {
-                throw new \InvalidArgumentException(
-                    $lang . ' argument has invalid value, please run info:language:list for list of available locales'
-                );
+        if ($areasExclude[0] != 'none') {
+            foreach ($areasExclude as $area) {
+                if (!in_array($area, $magentoAreas)) {
+                    throw new \InvalidArgumentException(
+                        $area .
+                        ' argument has invalid value, available areas are: ' . implode(', ', $magentoAreas)
+                    );
+                }
             }
         }
+    }
 
-        // run the deployment logic
+    /**
+     * {@inheritdoc}
+     * @param $languagesInclude array
+     * @param $languagesExclude array
+     * @throws \InvalidArgumentException
+     */
+    private function checkLanguagesInput($languagesInclude, $languagesExclude)
+    {
+        if ($languagesInclude[0] != 'all') {
+            foreach ($languagesInclude as $lang) {
+                if (!$this->validator->isValid($lang)) {
+                    throw new \InvalidArgumentException(
+                        $lang .
+                        ' argument has invalid value, please run info:language:list for list of available locales'
+                    );
+                }
+            }
+        }
+
+        if ($languagesInclude[0] != 'all' && $languagesExclude[0] != 'none') {
+            throw new \InvalidArgumentException(
+                '--language (-l) and --exclude-language cannot be used at the same time'
+            );
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     * @param $magentoThemes array
+     * @param $themesInclude array
+     * @param $themesExclude array
+     * @throws \InvalidArgumentException
+     */
+    private function checkThemesInput($magentoThemes, $themesInclude, $themesExclude)
+    {
+        if ($themesInclude[0] != 'all' && $themesExclude[0] != 'none') {
+            throw new \InvalidArgumentException(
+                '--theme (-t) and --exclude-theme cannot be used at the same time'
+            );
+        }
+
+        if ($themesInclude[0] != 'all') {
+            foreach ($themesInclude as $theme) {
+                if (!in_array($theme, $magentoThemes)) {
+                    throw new \InvalidArgumentException(
+                        $theme .
+                        ' argument has invalid value, available themes are: ' . implode(', ', $magentoThemes)
+                    );
+                }
+            }
+        }
+
+        if ($themesExclude[0] != 'none') {
+            foreach ($themesExclude as $theme) {
+                if (!in_array($theme, $magentoThemes)) {
+                    throw new \InvalidArgumentException(
+                        $theme .
+                        ' argument has invalid value, available themes are: ' . implode(', ', $magentoThemes)
+                    );
+                }
+            }
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     * @param $entities array
+     * @param $includedEntities array
+     * @param $excludedEntities array
+     * @return array
+     */
+    private function getDeployableEntities($entities, $includedEntities, $excludedEntities)
+    {
+        $deployableEntities = [];
+        if ($includedEntities[0] === 'all' && $excludedEntities[0] === 'none') {
+            $deployableEntities = $entities;
+        } elseif ($excludedEntities[0] !== 'none') {
+            $deployableEntities =  array_diff($entities, $excludedEntities);
+        } elseif ($includedEntities[0] !== 'all') {
+            $deployableEntities =  array_intersect($entities, $includedEntities);
+        }
+
+        return $deployableEntities;
+    }
+
+    /**
+     * {@inheritdoc}
+     * @throws \InvalidArgumentException
+     */
+    protected function execute(InputInterface $input, OutputInterface $output)
+    {
+        $this->input = $input;
         $filesUtil = $this->objectManager->create(Files::class);
 
-        $deployer = $this->objectManager->create(
-            'Magento\Deploy\Model\Deployer',
-            ['filesUtil' => $filesUtil, 'output' => $output, 'isDryRun' => $options[self::DRY_RUN_OPTION]]
+        list ($deployableLanguages, $deployableAreaThemeMap, $requestedThemes)
+            = $this->prepareDeployableEntities($filesUtil);
+
+        $output->writeln("Requested languages: " . implode(', ', $deployableLanguages));
+        $output->writeln("Requested areas: " . implode(', ', array_keys($deployableAreaThemeMap)));
+        $output->writeln("Requested themes: " . implode(', ', $requestedThemes));
+
+        /** @var $deployManager DeployManager */
+        $deployManager = $this->objectManager->create(
+            DeployManager::class,
+            [
+                'output' => $output,
+                'options' => $this->input->getOptions(),
+            ]
         );
-        return $deployer->deploy($this->objectManagerFactory, $languages);
+
+        foreach ($deployableAreaThemeMap as $area => $themes) {
+            foreach ($deployableLanguages as $locale) {
+                foreach ($themes as $themePath) {
+                    $deployManager->addPack($area, $themePath, $locale);
+                }
+            }
+        }
+
+        return $deployManager->deploy();
+    }
+
+    /**
+     * @param Files $filesUtil
+     * @return array
+     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
+     * @SuppressWarnings(PHPMD.NPathComplexity)
+     */
+    private function prepareDeployableEntities($filesUtil)
+    {
+        $magentoAreas = [];
+        $magentoThemes = [];
+        $magentoLanguages = [self::DEFAULT_LANGUAGE_VALUE];
+        $areaThemeMap = [];
+        $files = $filesUtil->getStaticPreProcessingFiles();
+        foreach ($files as $info) {
+            list($area, $themePath, $locale) = $info;
+            if ($themePath) {
+                $areaThemeMap[$area][$themePath] = $themePath;
+            }
+            if ($themePath && $area && !in_array($area, $magentoAreas)) {
+                $magentoAreas[] = $area;
+            }
+            if ($locale && !in_array($locale, $magentoLanguages)) {
+                $magentoLanguages[] = $locale;
+            }
+            if ($themePath && !in_array($themePath, $magentoThemes)) {
+                $magentoThemes[] = $themePath;
+            }
+        }
+
+        $areasInclude = $this->input->getOption(Options::AREA);
+        $areasExclude = $this->input->getOption(Options::EXCLUDE_AREA);
+        $this->checkAreasInput($magentoAreas, $areasInclude, $areasExclude);
+        $deployableAreas = $this->getDeployableEntities($magentoAreas, $areasInclude, $areasExclude);
+
+        $languagesInclude = $this->input->getArgument(self::LANGUAGES_ARGUMENT)
+            ?: $this->input->getOption(Options::LANGUAGE);
+        $languagesExclude = $this->input->getOption(Options::EXCLUDE_LANGUAGE);
+        $this->checkLanguagesInput($languagesInclude, $languagesExclude);
+        $deployableLanguages = $languagesInclude[0] == 'all'
+            ? $this->getDeployableEntities($magentoLanguages, $languagesInclude, $languagesExclude)
+            : $languagesInclude;
+
+        $themesInclude = $this->input->getOption(Options::THEME);
+        $themesExclude = $this->input->getOption(Options::EXCLUDE_THEME);
+        $this->checkThemesInput($magentoThemes, $themesInclude, $themesExclude);
+        $deployableThemes = $this->getDeployableEntities($magentoThemes, $themesInclude, $themesExclude);
+
+        $deployableAreaThemeMap = [];
+        $requestedThemes = [];
+        foreach ($areaThemeMap as $area => $themes) {
+            if (in_array($area, $deployableAreas) && $themes = array_intersect($themes, $deployableThemes)) {
+                $deployableAreaThemeMap[$area] = $themes;
+                $requestedThemes += $themes;
+            }
+        }
+
+        return [$deployableLanguages, $deployableAreaThemeMap, $requestedThemes];
     }
 }
diff --git a/vendor/magento/module-deploy/Console/Command/DeployStaticOptionsInterface.php b/vendor/magento/module-deploy/Console/Command/DeployStaticOptionsInterface.php
new file mode 100644
index 0000000..98d0995
--- /dev/null
+++ b/vendor/magento/module-deploy/Console/Command/DeployStaticOptionsInterface.php
@@ -0,0 +1,95 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Console\Command;
+
+interface DeployStaticOptionsInterface
+{
+    /**
+     * Key for dry-run option
+     */
+    const DRY_RUN = 'dry-run';
+
+    /**
+     * Key for languages parameter
+     */
+    const LANGUAGE = 'language';
+
+    /**
+     * Key for exclude languages parameter
+     */
+    const EXCLUDE_LANGUAGE = 'exclude-language';
+
+    /**
+     * Key for javascript option
+     */
+    const NO_JAVASCRIPT = 'no-javascript';
+
+    /**
+     * Key for css option
+     */
+    const NO_CSS = 'no-css';
+
+    /**
+     * Key for less option
+     */
+    const NO_LESS = 'no-less';
+
+    /**
+     * Key for images option
+     */
+    const NO_IMAGES = 'no-images';
+
+    /**
+     * Key for fonts option
+     */
+    const NO_FONTS = 'no-fonts';
+
+    /**
+     * Key for misc option
+     */
+    const NO_MISC = 'no-misc';
+
+    /**
+     * Key for html option
+     */
+    const NO_HTML = 'no-html';
+
+    /**
+     * Key for html option
+     */
+    const NO_HTML_MINIFY = 'no-html-minify';
+
+    /**
+     * Key for theme option
+     */
+    const THEME = 'theme';
+
+    /**
+     * Key for exclude theme option
+     */
+    const EXCLUDE_THEME = 'exclude-theme';
+
+    /**
+     * Key for area option
+     */
+    const AREA = 'area';
+
+    /**
+     * Key for exclude area option
+     */
+    const EXCLUDE_AREA = 'exclude-area';
+
+    /**
+     * Jey for jobs option
+     */
+    const JOBS_AMOUNT = 'jobs';
+
+    /**
+     * Symlink locale if it not customized
+     */
+    const SYMLINK_LOCALE = 'symlink-locale';
+}
diff --git a/vendor/magento/module-deploy/Model/Deploy/DeployInterface.php b/vendor/magento/module-deploy/Model/Deploy/DeployInterface.php
new file mode 100644
index 0000000..16168c2
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/Deploy/DeployInterface.php
@@ -0,0 +1,23 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model\Deploy;
+
+interface DeployInterface
+{
+    /**
+     * Base locale option without customizations
+     */
+    const DEPLOY_BASE_LOCALE = 'deploy_base_locale';
+
+    /**
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @return int
+     */
+    public function deploy($area, $themePath, $locale);
+}
diff --git a/vendor/magento/module-deploy/Model/Deploy/LocaleDeploy.php b/vendor/magento/module-deploy/Model/Deploy/LocaleDeploy.php
new file mode 100644
index 0000000..aa112a7
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/Deploy/LocaleDeploy.php
@@ -0,0 +1,453 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model\Deploy;
+
+use Magento\Framework\App\Utility\Files;
+use Magento\Framework\App\View\Asset\Publisher;
+use Magento\Framework\View\Asset\ContentProcessorException;
+use Magento\Framework\View\Asset\PreProcessor\AlternativeSourceInterface;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
+use Symfony\Component\Console\Output\OutputInterface;
+use Magento\Framework\Config\Theme;
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface as Options;
+use Magento\Framework\Translate\Js\Config as JsTranslationConfig;
+use Magento\Framework\View\Asset\Minification;
+use Psr\Log\LoggerInterface;
+use Magento\Framework\Console\Cli;
+
+/**
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ * @SuppressWarnings(PHPMD.TooManyFields)
+ */
+class LocaleDeploy implements DeployInterface
+{
+    /**
+     * @var int
+     */
+    private $count = 0;
+
+    /**
+     * @var int
+     */
+    private $errorCount = 0;
+
+    /**
+     * @var OutputInterface
+     */
+    private $output;
+
+    /**
+     * @var \Magento\Framework\View\Asset\Repository
+     */
+    private $assetRepo;
+
+    /**
+     * @var Publisher
+     */
+    private $assetPublisher;
+
+    /**
+     * @var \Magento\Framework\View\Asset\Bundle\Manager
+     */
+    private $bundleManager;
+
+    /**
+     * @var Files
+     */
+    private $filesUtil;
+
+    /**
+     * @var ThemeProviderInterface
+     */
+    private $themeProvider;
+
+    /**
+     * @var array
+     */
+    private $options = [];
+
+    /**
+     * @var JsTranslationConfig
+     */
+    private $jsTranslationConfig;
+
+    /**
+     * @var Minification
+     */
+    private $minification;
+
+    /**
+     * @var LoggerInterface
+     */
+    private $logger;
+
+    /**
+     * @var \Magento\Framework\View\Asset\RepositoryFactory
+     */
+    private $assetRepoFactory;
+
+    /**
+     * @var \Magento\RequireJs\Model\FileManagerFactory
+     */
+    private $fileManagerFactory;
+
+    /**
+     * @var \Magento\Framework\RequireJs\ConfigFactory
+     */
+    private $requireJsConfigFactory;
+
+    /**
+     * @var \Magento\Framework\View\DesignInterfaceFactory
+     */
+    private $designFactory;
+
+    /**
+     * @var \Magento\Framework\Locale\ResolverInterface
+     */
+    private $localeResolver;
+
+    /**
+     * @var \Magento\Framework\View\Asset\PreProcessor\AlternativeSourceInterface[]
+     */
+    private $alternativeSources;
+
+    /**
+     * @var array
+     */
+    private static $fileExtensionOptionMap = [
+        'js' => Options::NO_JAVASCRIPT,
+        'map' => Options::NO_JAVASCRIPT,
+        'css' => Options::NO_CSS,
+        'less' => Options::NO_LESS,
+        'html' => Options::NO_HTML,
+        'htm' => Options::NO_HTML,
+        'jpg' => Options::NO_IMAGES,
+        'jpeg' => Options::NO_IMAGES,
+        'gif' => Options::NO_IMAGES,
+        'png' => Options::NO_IMAGES,
+        'ico' => Options::NO_IMAGES,
+        'svg' => Options::NO_IMAGES,
+        'eot' => Options::NO_FONTS,
+        'ttf' => Options::NO_FONTS,
+        'woff' => Options::NO_FONTS,
+        'woff2' => Options::NO_FONTS,
+        'md' => Options::NO_MISC,
+        'jbf' => Options::NO_MISC,
+        'csv' => Options::NO_MISC,
+        'json' => Options::NO_MISC,
+        'txt' => Options::NO_MISC,
+        'htc' => Options::NO_MISC,
+        'swf' => Options::NO_MISC,
+        'LICENSE' => Options::NO_MISC,
+        '' => Options::NO_MISC,
+    ];
+
+    /**
+     * @param OutputInterface $output
+     * @param JsTranslationConfig $jsTranslationConfig
+     * @param Minification $minification
+     * @param \Magento\Framework\View\Asset\Repository $assetRepo
+     * @param \Magento\Framework\View\Asset\RepositoryFactory $assetRepoFactory
+     * @param \Magento\RequireJs\Model\FileManagerFactory $fileManagerFactory
+     * @param \Magento\Framework\RequireJs\ConfigFactory $requireJsConfigFactory
+     * @param Publisher $assetPublisher
+     * @param \Magento\Framework\View\Asset\Bundle\Manager $bundleManager
+     * @param ThemeProviderInterface $themeProvider
+     * @param LoggerInterface $logger
+     * @param Files $filesUtil
+     * @param \Magento\Framework\View\DesignInterfaceFactory $designFactory
+     * @param \Magento\Framework\Locale\ResolverInterface $localeResolver
+     * @param array $alternativeSources
+     * @param array $options
+     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
+     */
+    public function __construct(
+        OutputInterface $output,
+        JsTranslationConfig $jsTranslationConfig,
+        Minification $minification,
+        \Magento\Framework\View\Asset\Repository $assetRepo,
+        \Magento\Framework\View\Asset\RepositoryFactory $assetRepoFactory,
+        \Magento\RequireJs\Model\FileManagerFactory $fileManagerFactory,
+        \Magento\Framework\RequireJs\ConfigFactory $requireJsConfigFactory,
+        \Magento\Framework\App\View\Asset\Publisher $assetPublisher,
+        \Magento\Framework\View\Asset\Bundle\Manager $bundleManager,
+        \Magento\Framework\View\Design\Theme\ThemeProviderInterface $themeProvider,
+        LoggerInterface $logger,
+        Files $filesUtil,
+        \Magento\Framework\View\DesignInterfaceFactory $designFactory,
+        \Magento\Framework\Locale\ResolverInterface $localeResolver,
+        array $alternativeSources,
+        $options = []
+    ) {
+        $this->output = $output;
+        $this->assetRepo = $assetRepo;
+        $this->assetPublisher = $assetPublisher;
+        $this->bundleManager = $bundleManager;
+        $this->filesUtil = $filesUtil;
+        $this->jsTranslationConfig = $jsTranslationConfig;
+        $this->minification = $minification;
+        $this->logger = $logger;
+        $this->assetRepoFactory = $assetRepoFactory;
+        $this->fileManagerFactory = $fileManagerFactory;
+        $this->requireJsConfigFactory = $requireJsConfigFactory;
+        $this->themeProvider = $themeProvider;
+        $this->alternativeSources = array_map(
+            function (AlternativeSourceInterface $alternativeSource) {
+                return $alternativeSource;
+            },
+            $alternativeSources
+        );
+        $this->designFactory = $designFactory;
+        $this->localeResolver = $localeResolver;
+        $this->options = $options;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function deploy($area, $themePath, $locale)
+    {
+        $this->output->writeln("=== {$area} -> {$themePath} -> {$locale} ===");
+
+        // emulate application locale needed for correct file path resolving
+        $this->localeResolver->setLocale($locale);
+
+        $this->deployRequireJsConfig($area, $themePath);
+        $this->deployAppFiles($area, $themePath, $locale);
+        $this->deployLibFiles($area, $themePath, $locale);
+
+        if (!$this->getOption(Options::NO_JAVASCRIPT)) {
+            if ($this->jsTranslationConfig->dictionaryEnabled()) {
+                $dictionaryFileName = $this->jsTranslationConfig->getDictionaryFileName();
+                $this->deployFile($dictionaryFileName, $area, $themePath, $locale, null);
+            }
+        }
+        if (!$this->getOption(Options::NO_JAVASCRIPT)) {
+            $this->bundleManager->flush();
+        }
+        $this->output->writeln("\nSuccessful: {$this->count} files; errors: {$this->errorCount}\n---\n");
+
+        return $this->errorCount ? Cli::RETURN_FAILURE : Cli::RETURN_SUCCESS;
+    }
+
+    /**
+     * @param string $area
+     * @param string $themePath
+     * @return void
+     */
+    private function deployRequireJsConfig($area, $themePath)
+    {
+        if (!$this->getOption(Options::DRY_RUN) && !$this->getOption(Options::NO_JAVASCRIPT)) {
+            $design = $this->designFactory->create()->setDesignTheme($themePath, $area);
+            $assetRepo = $this->assetRepoFactory->create(['design' => $design]);
+            /** @var \Magento\RequireJs\Model\FileManager $fileManager */
+            $fileManager = $this->fileManagerFactory->create(
+                [
+                    'config' => $this->requireJsConfigFactory->create(
+                        [
+                            'assetRepo' => $assetRepo,
+                            'design' => $design,
+                        ]
+                    ),
+                    'assetRepo' => $assetRepo,
+                ]
+            );
+            $fileManager->createRequireJsConfigAsset();
+            if ($this->minification->isEnabled('js')) {
+                $fileManager->createMinResolverAsset();
+            }
+        }
+    }
+
+    /**
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @return void
+     */
+    private function deployAppFiles($area, $themePath, $locale)
+    {
+        foreach ($this->filesUtil->getStaticPreProcessingFiles() as $info) {
+            list($fileArea, $fileTheme, , $module, $filePath, $fullPath) = $info;
+
+            if ($this->checkSkip($filePath)) {
+                continue;
+            }
+
+            if ($this->isCanBeDeployed($fileArea, $fileTheme, $area, $themePath)) {
+                $compiledFile = $this->deployFile(
+                    $filePath,
+                    $area,
+                    $themePath,
+                    $locale,
+                    $module,
+                    $fullPath
+                );
+                if ($compiledFile !== '' && !$this->checkSkip($compiledFile)) {
+                    $this->deployFile($compiledFile, $area, $themePath, $locale, $module, $fullPath);
+                }
+            }
+        }
+    }
+
+    /**
+     * @param string $fileArea
+     * @param string $fileTheme
+     * @param string $area
+     * @param string $themePath
+     * @return bool
+     */
+    private function isCanBeDeployed($fileArea, $fileTheme, $area, $themePath)
+    {
+        return ($fileArea == $area || $fileArea == 'base')
+        && ($fileTheme == '' || $fileTheme == $themePath
+            || in_array(
+                $fileArea . Theme::THEME_PATH_SEPARATOR . $fileTheme,
+                $this->findAncestors($area . Theme::THEME_PATH_SEPARATOR . $themePath)
+            )
+        );
+    }
+
+    /**
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @return void
+     */
+    private function deployLibFiles($area, $themePath, $locale)
+    {
+        foreach ($this->filesUtil->getStaticLibraryFiles() as $filePath) {
+
+            if ($this->checkSkip($filePath)) {
+                continue;
+            }
+
+            $compiledFile = $this->deployFile($filePath, $area, $themePath, $locale, null);
+
+            if ($compiledFile !== '' && !$this->checkSkip($compiledFile)) {
+                $this->deployFile($compiledFile, $area, $themePath, $locale, null);
+            }
+        }
+    }
+
+    /**
+     * Deploy a static view file
+     *
+     * @param string $filePath
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @param string $module
+     * @param string|null $fullPath
+     * @return string
+     *
+     * @SuppressWarnings(PHPMD.NPathComplexity)
+     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
+     */
+    private function deployFile($filePath, $area, $themePath, $locale, $module, $fullPath = null)
+    {
+        $compiledFile = '';
+        $extension = pathinfo($filePath, PATHINFO_EXTENSION);
+
+        foreach ($this->alternativeSources as $name => $alternative) {
+            if (in_array($extension, $alternative->getAlternativesExtensionsNames(), true)
+                && strpos(basename($filePath), '_') !== 0
+            ) {
+                $compiledFile = substr($filePath, 0, strlen($filePath) - strlen($extension) - 1);
+                $compiledFile = $compiledFile . '.' . $name;
+            }
+        }
+
+        if ($this->output->isVeryVerbose()) {
+            $logMessage = "Processing file '$filePath' for area '$area', theme '$themePath', locale '$locale'";
+            if ($module) {
+                $logMessage .= ", module '$module'";
+            }
+            $this->output->writeln($logMessage);
+        }
+
+        try {
+            $asset = $this->assetRepo->createAsset(
+                $filePath,
+                ['area' => $area, 'theme' => $themePath, 'locale' => $locale, 'module' => $module]
+            );
+            if ($this->output->isVeryVerbose()) {
+                $this->output->writeln("\tDeploying the file to '{$asset->getPath()}'");
+            } else {
+                $this->output->write('.');
+            }
+            if ($this->getOption(Options::DRY_RUN)) {
+                $asset->getContent();
+            } else {
+                $this->assetPublisher->publish($asset);
+                if (!$this->getOption(Options::NO_JAVASCRIPT)) {
+                    $this->bundleManager->addAsset($asset);
+                }
+            }
+            $this->count++;
+        } catch (ContentProcessorException $exception) {
+            $pathInfo = $fullPath ?: $filePath;
+            $errorMessage =  __('Compilation from source: ') . $pathInfo . PHP_EOL . $exception->getMessage();
+            $this->errorCount++;
+            $this->output->write(PHP_EOL . PHP_EOL . $errorMessage . PHP_EOL, true);
+
+            $this->logger->critical($errorMessage);
+        } catch (\Exception $exception) {
+            $this->output->write('.');
+            if ($this->output->isVerbose()) {
+                $this->output->writeln($exception->getTraceAsString());
+            }
+            $this->errorCount++;
+        }
+
+        return $compiledFile;
+    }
+
+    /**
+     * @param string $name
+     * @return mixed|null
+     */
+    private function getOption($name)
+    {
+        return isset($this->options[$name]) ? $this->options[$name] : null;
+    }
+
+    /**
+     * Check if skip flag is affecting file by extension
+     *
+     * @param string $filePath
+     * @return boolean
+     */
+    private function checkSkip($filePath)
+    {
+        if ($filePath != '.') {
+            $ext = strtolower(pathinfo($filePath, PATHINFO_EXTENSION));
+            $option = isset(self::$fileExtensionOptionMap[$ext]) ? self::$fileExtensionOptionMap[$ext] : null;
+
+            return $option ? $this->getOption($option) : false;
+        }
+
+        return false;
+    }
+
+    /**
+     * Find ancestor themes' full paths
+     *
+     * @param string $themeFullPath
+     * @return string[]
+     */
+    private function findAncestors($themeFullPath)
+    {
+        $theme = $this->themeProvider->getThemeByFullPath($themeFullPath);
+        $ancestors = $theme->getInheritedThemes();
+        $ancestorThemeFullPath = [];
+        foreach ($ancestors as $ancestor) {
+            $ancestorThemeFullPath[] = $ancestor->getFullPath();
+        }
+        return $ancestorThemeFullPath;
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/Deploy/LocaleQuickDeploy.php b/vendor/magento/module-deploy/Model/Deploy/LocaleQuickDeploy.php
new file mode 100644
index 0000000..8102afb
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/Deploy/LocaleQuickDeploy.php
@@ -0,0 +1,152 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model\Deploy;
+
+use Magento\Deploy\Model\DeployManager;
+use Magento\Framework\App\Filesystem\DirectoryList;
+use Magento\Framework\App\Utility\Files;
+use Magento\Framework\Filesystem;
+use Magento\Framework\Filesystem\Directory\WriteInterface;
+use Symfony\Component\Console\Output\OutputInterface;
+use Magento\Framework\Console\Cli;
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface as Options;
+use \Magento\Framework\RequireJs\Config as RequireJsConfig;
+
+class LocaleQuickDeploy implements DeployInterface
+{
+    /**
+     * @var Filesystem
+     */
+    private $filesystem;
+
+    /**
+     * @var WriteInterface
+     */
+    private $staticDirectory;
+
+    /**
+     * @var OutputInterface
+     */
+    private $output;
+
+    /**
+     * @var array
+     */
+    private $options = [];
+
+    /**
+     * @param Filesystem $filesystem
+     * @param OutputInterface $output
+     * @param array $options
+     */
+    public function __construct(\Magento\Framework\Filesystem $filesystem, OutputInterface $output, $options = [])
+    {
+        $this->filesystem = $filesystem;
+        $this->output = $output;
+        $this->options = $options;
+    }
+
+    /**
+     * @return WriteInterface
+     */
+    private function getStaticDirectory()
+    {
+        if ($this->staticDirectory === null) {
+            $this->staticDirectory = $this->filesystem->getDirectoryWrite(DirectoryList::STATIC_VIEW);
+        }
+
+        return $this->staticDirectory;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function deploy($area, $themePath, $locale)
+    {
+        if (isset($this->options[Options::DRY_RUN]) && $this->options[Options::DRY_RUN]) {
+            return Cli::RETURN_SUCCESS;
+        }
+
+        $this->output->writeln("=== {$area} -> {$themePath} -> {$locale} ===");
+
+        if (!isset($this->options[self::DEPLOY_BASE_LOCALE])) {
+            throw new \InvalidArgumentException('Deploy base locale must be set for Quick Deploy');
+        }
+        $processedFiles = 0;
+        $errorAmount = 0;
+
+        $baseLocale = $this->options[self::DEPLOY_BASE_LOCALE];
+        $newLocalePath = $this->getLocalePath($area, $themePath, $locale);
+        $baseLocalePath = $this->getLocalePath($area, $themePath, $baseLocale);
+        $baseRequireJsPath = RequireJsConfig::DIR_NAME . DIRECTORY_SEPARATOR . $baseLocalePath;
+        $newRequireJsPath = RequireJsConfig::DIR_NAME . DIRECTORY_SEPARATOR . $newLocalePath;
+
+        $this->deleteLocaleResource($newLocalePath);
+        $this->deleteLocaleResource($newRequireJsPath);
+
+        if (isset($this->options[Options::SYMLINK_LOCALE]) && $this->options[Options::SYMLINK_LOCALE]) {
+            $this->getStaticDirectory()->createSymlink($baseLocalePath, $newLocalePath);
+            $this->getStaticDirectory()->createSymlink($baseRequireJsPath, $newRequireJsPath);
+
+            $this->output->writeln("\nSuccessful symlinked\n---\n");
+        } else {
+            $localeFiles = array_merge(
+                $this->getStaticDirectory()->readRecursively($baseLocalePath),
+                $this->getStaticDirectory()->readRecursively($baseRequireJsPath)
+            );
+            foreach ($localeFiles as $path) {
+                if ($this->getStaticDirectory()->isFile($path)) {
+                    $destination = $this->replaceLocaleInPath($path, $baseLocale, $locale);
+                    $this->getStaticDirectory()->copyFile($path, $destination);
+                    $processedFiles++;
+                }
+            }
+
+            $this->output->writeln("\nSuccessful copied: {$processedFiles} files; errors: {$errorAmount}\n---\n");
+        }
+
+        return Cli::RETURN_SUCCESS;
+    }
+
+    /**
+     * @param string $path
+     * @return void
+     */
+    private function deleteLocaleResource($path)
+    {
+        if ($this->getStaticDirectory()->isExist($path)) {
+            $absolutePath = $this->getStaticDirectory()->getAbsolutePath($path);
+            if (is_link($absolutePath)) {
+                $this->getStaticDirectory()->getDriver()->deleteFile($absolutePath);
+            } else {
+                $this->getStaticDirectory()->getDriver()->deleteDirectory($absolutePath);
+            }
+        }
+    }
+
+    /**
+     * @param string $path
+     * @param string $search
+     * @param string $replace
+     * @return string
+     */
+    private function replaceLocaleInPath($path, $search, $replace)
+    {
+        return preg_replace('~' . $search . '~', $replace, $path, 1);
+    }
+
+    /**
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @return string
+     */
+    private function getLocalePath($area, $themePath, $locale)
+    {
+        return $area . DIRECTORY_SEPARATOR . $themePath . DIRECTORY_SEPARATOR . $locale;
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/Deploy/TemplateMinifier.php b/vendor/magento/module-deploy/Model/Deploy/TemplateMinifier.php
new file mode 100644
index 0000000..7a5d8f9
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/Deploy/TemplateMinifier.php
@@ -0,0 +1,49 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model\Deploy;
+
+use Magento\Framework\View\Template\Html\MinifierInterface;
+use Magento\Framework\App\Utility\Files;
+
+class TemplateMinifier
+{
+    /**
+     * @var Files
+     */
+    private $filesUtils;
+
+    /**
+     * @var MinifierInterface
+     */
+    private $htmlMinifier;
+
+    /**
+     * @param Files $filesUtils
+     * @param MinifierInterface $htmlMinifier
+     */
+    public function __construct(
+        Files $filesUtils,
+        MinifierInterface $htmlMinifier
+    ) {
+        $this->filesUtils = $filesUtils;
+        $this->htmlMinifier = $htmlMinifier;
+    }
+
+    /**
+     * Minify template files
+     * @return int
+     */
+    public function minifyTemplates()
+    {
+        $minified = 0;
+        foreach ($this->filesUtils->getPhtmlFiles(false, false) as $template) {
+            $this->htmlMinifier->minify($template);
+            $minified++;
+        }
+        return $minified;
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/DeployManager.php b/vendor/magento/module-deploy/Model/DeployManager.php
new file mode 100644
index 0000000..6dbb4cf
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/DeployManager.php
@@ -0,0 +1,213 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+use Magento\Framework\App\View\Deployment\Version\StorageInterface;
+use Symfony\Component\Console\Output\OutputInterface;
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface as Options;
+use Magento\Deploy\Model\Deploy\TemplateMinifier;
+use Magento\Framework\App\State;
+
+class DeployManager
+{
+    /**
+     * @var array
+     */
+    private $packages = [];
+
+    /**
+     * @var OutputInterface
+     */
+    private $output;
+
+    /**
+     * @var array
+     */
+    private $options;
+
+    /**
+     * @var StorageInterface
+     */
+    private $versionStorage;
+
+    /**
+     * @var DeployStrategyProviderFactory
+     */
+    private $deployStrategyProviderFactory;
+
+    /**
+     * @var ProcessQueueManagerFactory
+     */
+    private $processQueueManagerFactory;
+
+    /**
+     * @var TemplateMinifier
+     */
+    private $templateMinifier;
+
+    /**
+     * @var bool
+     */
+    private $idDryRun;
+
+    /**
+     * @var State
+     */
+    private $state;
+
+    /**
+     * @param OutputInterface $output
+     * @param StorageInterface $versionStorage
+     * @param DeployStrategyProviderFactory $deployStrategyProviderFactory
+     * @param ProcessQueueManagerFactory $processQueueManagerFactory
+     * @param TemplateMinifier $templateMinifier
+     * @param State $state
+     * @param array $options
+     */
+    public function __construct(
+        OutputInterface $output,
+        StorageInterface $versionStorage,
+        DeployStrategyProviderFactory $deployStrategyProviderFactory,
+        ProcessQueueManagerFactory $processQueueManagerFactory,
+        TemplateMinifier $templateMinifier,
+        State $state,
+        array $options
+    ) {
+        $this->output = $output;
+        $this->options = $options;
+        $this->versionStorage = $versionStorage;
+        $this->deployStrategyProviderFactory = $deployStrategyProviderFactory;
+        $this->processQueueManagerFactory = $processQueueManagerFactory;
+        $this->templateMinifier = $templateMinifier;
+        $this->state = $state;
+        $this->idDryRun = !empty($this->options[Options::DRY_RUN]);
+    }
+
+    /**
+     * Add package tie to area and theme
+     *
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @return void
+     */
+    public function addPack($area, $themePath, $locale)
+    {
+        $this->packages[$area . '-' . $themePath][$locale] = [$area, $themePath];
+    }
+
+    /**
+     * Deploy local packages with chosen deploy strategy
+     * @return int
+     */
+    public function deploy()
+    {
+        if ($this->idDryRun) {
+            $this->output->writeln('Dry run. Nothing will be recorded to the target directory.');
+        }
+
+        /** @var DeployStrategyProvider $strategyProvider */
+        $strategyProvider = $this->deployStrategyProviderFactory->create(
+            ['output' => $this->output, 'options' => $this->options]
+        );
+
+        if ($this->isCanBeParalleled()) {
+            $result = $this->runInParallel($strategyProvider);
+        } else {
+            $result = 0;
+            foreach ($this->packages as $package) {
+                $locales = array_keys($package);
+                list($area, $themePath) = current($package);
+                foreach ($strategyProvider->getDeployStrategies($area, $themePath, $locales) as $locale => $strategy) {
+                    $result |= $this->state->emulateAreaCode(
+                        $area,
+                        [$strategy, 'deploy'],
+                        [$area, $themePath, $locale]
+                    );
+                }
+            }
+        }
+
+        $this->minifyTemplates();
+        $this->saveDeployedVersion();
+
+        return $result;
+    }
+
+    /**
+     * @return void
+     */
+    private function minifyTemplates()
+    {
+        $noHtmlMinify = isset($this->options[Options::NO_HTML_MINIFY]) ? $this->options[Options::NO_HTML_MINIFY] : null;
+        if (!$noHtmlMinify && !$this->idDryRun) {
+            $this->output->writeln('=== Minify templates ===');
+            $minified = $this->templateMinifier->minifyTemplates();
+            $this->output->writeln("\nSuccessful: {$minified} files modified\n---\n");
+        }
+    }
+
+    /**
+     * @param DeployStrategyProvider $strategyProvider
+     * @return int
+     */
+    private function runInParallel($strategyProvider)
+    {
+        $processQueueManager = $this->processQueueManagerFactory->create(
+            ['maxProcesses' => $this->getProcessesAmount()]
+        );
+        foreach ($this->packages as $package) {
+            $locales = array_keys($package);
+            list($area, $themePath) = current($package);
+            $baseStrategy = null;
+            $dependentStrategy = [];
+            foreach ($strategyProvider->getDeployStrategies($area, $themePath, $locales) as $locale => $strategy) {
+                $deploymentFunc = function () use ($area, $themePath, $locale, $strategy) {
+                    return $this->state->emulateAreaCode($area, [$strategy, 'deploy'], [$area, $themePath, $locale]);
+                };
+                if (null === $baseStrategy) {
+                    $baseStrategy = $deploymentFunc;
+                } else {
+                    $dependentStrategy[] = $deploymentFunc;
+                }
+
+            }
+            $processQueueManager->addTaskToQueue($baseStrategy, $dependentStrategy);
+        }
+
+        return $processQueueManager->process();
+    }
+
+    /**
+     * @return bool
+     */
+    private function isCanBeParalleled()
+    {
+        return function_exists('pcntl_fork') && $this->getProcessesAmount() > 1;
+    }
+
+    /**
+     * @return int
+     */
+    private function getProcessesAmount()
+    {
+        return isset($this->options[Options::JOBS_AMOUNT]) ? (int)$this->options[Options::JOBS_AMOUNT] : 0;
+    }
+
+    /**
+     * Save version of deployed files
+     * @return void
+     */
+    private function saveDeployedVersion()
+    {
+        if (!$this->idDryRun) {
+            $version = (new \DateTime())->getTimestamp();
+            $this->output->writeln("New version of deployed files: {$version}");
+            $this->versionStorage->save($version);
+        }
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/DeployStrategyFactory.php b/vendor/magento/module-deploy/Model/DeployStrategyFactory.php
new file mode 100644
index 0000000..884ff5b
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/DeployStrategyFactory.php
@@ -0,0 +1,52 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+use Magento\Deploy\Model\Deploy\DeployInterface;
+use Magento\Framework\Exception\InputException;
+use Magento\Framework\ObjectManagerInterface;
+
+class DeployStrategyFactory
+{
+    /**
+     * Standard deploy strategy
+     */
+    const DEPLOY_STRATEGY_STANDARD = 'standard';
+
+    /**
+     * Quick deploy strategy
+     */
+    const DEPLOY_STRATEGY_QUICK = 'quick';
+
+    /**
+     * @param ObjectManagerInterface $objectManager
+     */
+    public function __construct(ObjectManagerInterface $objectManager)
+    {
+        $this->objectManager = $objectManager;
+    }
+
+    /**
+     * @param string $type
+     * @param array $arguments
+     * @return DeployInterface
+     * @throws InputException
+     */
+    public function create($type, array $arguments = [])
+    {
+        $strategyMap = [
+            self::DEPLOY_STRATEGY_STANDARD => Deploy\LocaleDeploy::class,
+            self::DEPLOY_STRATEGY_QUICK => Deploy\LocaleQuickDeploy::class,
+        ];
+
+        if (!isset($strategyMap[$type])) {
+            throw new InputException(__('Wrong deploy strategy type: %1', $type));
+        }
+
+        return $this->objectManager->create($strategyMap[$type], $arguments);
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/DeployStrategyProvider.php b/vendor/magento/module-deploy/Model/DeployStrategyProvider.php
new file mode 100644
index 0000000..9893aa1
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/DeployStrategyProvider.php
@@ -0,0 +1,193 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+use Magento\Deploy\Model\Deploy\DeployInterface;
+use Magento\Framework\Component\ComponentRegistrar;
+use Magento\Framework\Module\Dir;
+use Magento\Framework\View\Design\Fallback\Rule\RuleInterface;
+use Magento\Framework\View\DesignInterface;
+use Magento\Framework\View\Design\Fallback\RulePool;
+use Symfony\Component\Console\Output\OutputInterface;
+
+class DeployStrategyProvider
+{
+    /**
+     * @var RulePool
+     */
+    private $rulePool;
+
+    /**
+     * @var RuleInterface
+     */
+    private $fallBackRule;
+
+    /**
+     * @var array
+     */
+    private $moduleDirectories;
+
+    /**
+     * @var DesignInterface
+     */
+    private $design;
+
+    /**
+     * @var OutputInterface
+     */
+    private $output;
+
+    /**
+     * @var array
+     */
+    private $options;
+
+    /**
+     * @var DeployStrategyFactory
+     */
+    private $deployStrategyFactory;
+
+    /**
+     * @param OutputInterface $output
+     * @param RulePool $rulePool
+     * @param DesignInterface $design
+     * @param DeployStrategyFactory $deployStrategyFactory
+     * @param array $options
+     */
+    public function __construct(
+        OutputInterface $output,
+        RulePool $rulePool,
+        DesignInterface $design,
+        DeployStrategyFactory $deployStrategyFactory,
+        array $options
+    ) {
+        $this->rulePool = $rulePool;
+        $this->design = $design;
+        $this->output = $output;
+        $this->options = $options;
+        $this->deployStrategyFactory = $deployStrategyFactory;
+    }
+
+    /**
+     * @param string $area
+     * @param string $themePath
+     * @param array $locales
+     * @return DeployInterface[]
+     */
+    public function getDeployStrategies($area, $themePath, array $locales)
+    {
+        if (count($locales) == 1) {
+            $locale = current($locales);
+            return [$locale => $this->getDeployStrategy(DeployStrategyFactory::DEPLOY_STRATEGY_STANDARD)];
+        }
+
+        $baseLocale = null;
+        $deployStrategies = [];
+
+        foreach ($locales as $locale) {
+            $hasCustomization = false;
+            foreach ($this->getCustomizationDirectories($area, $themePath, $locale) as $directory) {
+                if (glob($directory . DIRECTORY_SEPARATOR . '*', GLOB_NOSORT)) {
+                    $hasCustomization = true;
+                    break;
+                }
+            }
+            if ($baseLocale === null && !$hasCustomization) {
+                $baseLocale = $locale;
+            } else {
+                $deployStrategies[$locale] = $hasCustomization
+                    ? DeployStrategyFactory::DEPLOY_STRATEGY_STANDARD
+                    : DeployStrategyFactory::DEPLOY_STRATEGY_QUICK;
+            }
+        }
+        $deployStrategies = array_merge(
+            [$baseLocale => DeployStrategyFactory::DEPLOY_STRATEGY_STANDARD],
+            $deployStrategies
+        );
+
+        return array_map(function ($strategyType) use ($area, $baseLocale) {
+            return $this->getDeployStrategy($strategyType, $baseLocale);
+        }, $deployStrategies);
+    }
+
+    /**
+     * @param array $params
+     * @return array
+     */
+    private function getLocaleDirectories($params)
+    {
+        $dirs = $this->getFallbackRule()->getPatternDirs($params);
+
+        return array_filter($dirs, function ($dir) {
+            return strpos($dir, Dir::MODULE_I18N_DIR);
+        });
+    }
+
+    /**
+     * Get directories which can contains theme customization
+     * @param string $area
+     * @param string $themePath
+     * @param string $locale
+     * @return array
+     */
+    private function getCustomizationDirectories($area, $themePath, $locale)
+    {
+        $customizationDirectories = [];
+        $this->design->setDesignTheme($themePath, $area);
+
+        $params = ['area' => $area, 'theme' => $this->design->getDesignTheme(), 'locale' => $locale];
+        foreach ($this->getLocaleDirectories($params) as $patternDir) {
+            $customizationDirectories[] = $patternDir;
+        }
+
+        if ($this->moduleDirectories === null) {
+            $this->moduleDirectories = [];
+            $componentRegistrar = new ComponentRegistrar();
+            $this->moduleDirectories = array_keys($componentRegistrar->getPaths(ComponentRegistrar::MODULE));
+        }
+
+        foreach ($this->moduleDirectories as $moduleDir) {
+            $params['module_name'] = $moduleDir;
+            $patternDirs = $this->getLocaleDirectories($params);
+            foreach ($patternDirs as $patternDir) {
+                $customizationDirectories[] = $patternDir;
+            }
+        }
+
+        return $customizationDirectories;
+    }
+
+    /**
+     * @return \Magento\Framework\View\Design\Fallback\Rule\RuleInterface
+     */
+    private function getFallbackRule()
+    {
+        if (null === $this->fallBackRule) {
+            $this->fallBackRule = $this->rulePool->getRule(RulePool::TYPE_STATIC_FILE);
+        }
+
+        return $this->fallBackRule;
+    }
+
+    /**
+     * @param string $type
+     * @param null|string $baseLocale
+     * @return DeployInterface
+     */
+    private function getDeployStrategy($type, $baseLocale = null)
+    {
+        $options = $this->options;
+        if ($baseLocale) {
+            $options[DeployInterface::DEPLOY_BASE_LOCALE] = $baseLocale;
+        }
+
+        return $this->deployStrategyFactory->create(
+            $type,
+            ['output' => $this->output, 'options' => $options]
+        );
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/Deployer.php b/vendor/magento/module-deploy/Model/Deployer.php
index 5ce8251..9c1781d 100644
--- a/vendor/magento/module-deploy/Model/Deployer.php
+++ b/vendor/magento/module-deploy/Model/Deployer.php
@@ -6,73 +6,41 @@
 
 namespace Magento\Deploy\Model;
 
-use Magento\Framework\Exception\LocalizedException;
-use Magento\Framework\View\Asset\ContentProcessorException;
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface;
 use Magento\Framework\View\Asset\PreProcessor\AlternativeSourceInterface;
 use Magento\Framework\App\ObjectManagerFactory;
 use Magento\Framework\App\View\Deployment\Version;
-use Magento\Framework\App\View\Asset\Publisher;
 use Magento\Framework\App\Utility\Files;
-use Magento\Framework\Config\Theme;
-use Magento\Framework\ObjectManagerInterface;
 use Magento\Framework\Translate\Js\Config as JsTranslationConfig;
 use Symfony\Component\Console\Output\OutputInterface;
+use Magento\Framework\App\ObjectManager;
+use Magento\Deploy\Model\DeployManagerFactory;
 
 /**
  * A service for deploying Magento static view files for production mode
  *
- * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
- * @SuppressWarnings(PHPMD.UnusedLocalVariable)
+ * @deprecated
+ * @see Use DeployManager::deploy instead
  */
 class Deployer
 {
-    /** @var Files */
-    private $filesUtil;
-
-    /** @var ObjectManagerFactory */
-    private $omFactory;
-
     /** @var OutputInterface */
     private $output;
 
-    /** @var Version\StorageInterface */
-    private $versionStorage;
-
-    /** @var \Magento\Framework\View\Asset\Repository */
-    private $assetRepo;
-
-    /** @var Publisher */
-    private $assetPublisher;
-
-    /** @var \Magento\Framework\View\Asset\Bundle\Manager */
-    private $bundleManager;
-
-    /** @var bool */
-    private $isDryRun;
-
-    /** @var int */
-    private $count;
-
-    /** @var int */
-    private $errorCount;
-
-    /** @var \Magento\Framework\View\Template\Html\MinifierInterface */
-    private $htmlMinifier;
-
     /**
-     * @var ObjectManagerInterface
+     * @var JsTranslationConfig
      */
-    private $objectManager;
+    protected $jsTranslationConfig;
 
     /**
-     * @var JsTranslationConfig
+     * @var array
      */
-    protected $jsTranslationConfig;
+    private $options;
 
     /**
-     * @var AlternativeSourceInterface[]
+     * @var DeployManagerFactory
      */
-    private $alternativeSources;
+    private $deployManagerFactory;
 
     /**
      * Constructor
@@ -82,7 +50,9 @@ class Deployer
      * @param Version\StorageInterface $versionStorage
      * @param JsTranslationConfig $jsTranslationConfig
      * @param AlternativeSourceInterface[] $alternativeSources
-     * @param bool $isDryRun
+     * @param DeployManagerFactory $deployManagerFactory
+     * @param array $options
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
      */
     public function __construct(
         Files $filesUtil,
@@ -90,184 +60,56 @@ class Deployer
         Version\StorageInterface $versionStorage,
         JsTranslationConfig $jsTranslationConfig,
         array $alternativeSources,
-        $isDryRun = false
+        DeployManagerFactory $deployManagerFactory = null,
+        $options = []
     ) {
-        $this->filesUtil = $filesUtil;
         $this->output = $output;
-        $this->versionStorage = $versionStorage;
-        $this->isDryRun = $isDryRun;
-        $this->jsTranslationConfig = $jsTranslationConfig;
-        $this->parentTheme = [];
-
-        array_map(
-            function (AlternativeSourceInterface $alternative) {
-            },
-            $alternativeSources
-        );
-        $this->alternativeSources = $alternativeSources;
-    }
-
-    /**
-     * Populate all static view files for specified root path and list of languages
-     *
-     * @param ObjectManagerFactory $omFactory
-     * @param array $locales
-     * @return int
-     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
-     * @SuppressWarnings(PHPMD.NPathComplexity)
-     */
-    public function deploy(ObjectManagerFactory $omFactory, array $locales)
-    {
-        $this->omFactory = $omFactory;
-        if ($this->isDryRun) {
-            $this->output->writeln('Dry run. Nothing will be recorded to the target directory.');
-        }
-        $langList = implode(', ', $locales);
-        $this->output->writeln("Requested languages: {$langList}");
-        $libFiles = $this->filesUtil->getStaticLibraryFiles();
-        list($areas, $appFiles) = $this->collectAppFiles($locales);
-        foreach ($areas as $area => $themes) {
-            $this->emulateApplicationArea($area);
-            foreach ($locales as $locale) {
-                $this->emulateApplicationLocale($locale, $area);
-                foreach ($themes as $themePath) {
-                    $this->output->writeln("=== {$area} -> {$themePath} -> {$locale} ===");
-                    $this->count = 0;
-                    $this->errorCount = 0;
-                    /** @var \Magento\Theme\Model\View\Design $design */
-                    $design = $this->objectManager->create('Magento\Theme\Model\View\Design');
-                    $design->setDesignTheme($themePath, $area);
-                    $assetRepo = $this->objectManager->create(
-                        'Magento\Framework\View\Asset\Repository',
-                        [
-                            'design' => $design,
-                        ]
-                    );
-                    /** @var \Magento\RequireJs\Model\FileManager $fileManager */
-                    $fileManager = $this->objectManager->create(
-                        'Magento\RequireJs\Model\FileManager',
-                        [
-                            'config' => $this->objectManager->create(
-                                'Magento\Framework\RequireJs\Config',
-                                [
-                                    'assetRepo' => $assetRepo,
-                                    'design' => $design,
-                                ]
-                            ),
-                            'assetRepo' => $assetRepo,
-                        ]
-                    );
-                    $fileManager->createRequireJsConfigAsset();
-                    foreach ($appFiles as $info) {
-                        list($fileArea, $fileTheme, , $module, $filePath) = $info;
-                        if (($fileArea == $area || $fileArea == 'base') &&
-                            ($fileTheme == '' || $fileTheme == $themePath ||
-                                in_array(
-                                    $fileArea . Theme::THEME_PATH_SEPARATOR . $fileTheme,
-                                    $this->findAncestors($area . Theme::THEME_PATH_SEPARATOR . $themePath)
-                                ))
-                        ) {
-                            $compiledFile = $this->deployFile($filePath, $area, $themePath, $locale, $module);
-                            if ($compiledFile !== '') {
-                                $this->deployFile($compiledFile, $area, $themePath, $locale, $module);
-                            }
-                        }
-                    }
-                    foreach ($libFiles as $filePath) {
-                        $compiledFile = $this->deployFile($filePath, $area, $themePath, $locale, null);
-                        if ($compiledFile !== '') {
-                            $this->deployFile($compiledFile, $area, $themePath, $locale, null);
-                        }
-                    }
-                    if ($this->jsTranslationConfig->dictionaryEnabled()) {
-                        $dictionaryFileName = $this->jsTranslationConfig->getDictionaryFileName();
-                        $this->deployFile($dictionaryFileName, $area, $themePath, $locale, null);
-                    }
-                    $fileManager->clearBundleJsPool();
-                    $this->bundleManager->flush();
-                    $this->output->writeln("\nSuccessful: {$this->count} files; errors: {$this->errorCount}\n---\n");
-                }
-            }
-        }
-        $this->output->writeln('=== Minify templates ===');
-        $this->count = 0;
-        foreach ($this->filesUtil->getPhtmlFiles(false, false) as $template) {
-            $this->htmlMinifier->minify($template);
-            if ($this->output->getVerbosity() >= OutputInterface::VERBOSITY_VERBOSE) {
-                $this->output->writeln($template . " minified\n");
-            } else {
-                $this->output->write('.');
-            }
-            $this->count++;
+        $this->deployManagerFactory = $deployManagerFactory;
+        if (is_array($options)) {
+            $this->options = $options;
+        } else {
+            // backward compatibility support
+            $this->options = [DeployStaticOptionsInterface::DRY_RUN => (bool)$options];
         }
-        $this->output->writeln("\nSuccessful: {$this->count} files modified\n---\n");
-        $version = (new \DateTime())->getTimestamp();
-        $this->output->writeln("New version of deployed files: {$version}");
-        if (!$this->isDryRun) {
-            $this->versionStorage->save($version);
-        }
-        if ($this->errorCount > 0) {
-            // we must have an exit code higher than zero to indicate something was wrong
-            return \Magento\Framework\Console\Cli::RETURN_FAILURE;
-        }
-        return \Magento\Framework\Console\Cli::RETURN_SUCCESS;
     }
 
     /**
-     * Accumulate all static view files in the application and record all found areas, themes and languages
-     *
-     * Returns an array of areas and files with meta information
-     *
-     * @param array $requestedLocales
-     * @return array
+     * @return \Magento\Deploy\Model\DeployManagerFactory
      */
-    private function collectAppFiles($requestedLocales)
+    private function getDeployManagerFactory()
     {
-        $areas = [];
-        $locales = [];
-        $files = $this->filesUtil->getStaticPreProcessingFiles();
-        foreach ($files as $info) {
-            list($area, $themePath, $locale) = $info;
-            if ($themePath) {
-                $areas[$area][$themePath] = $themePath;
-            }
-            if ($locale) {
-                $locales[$locale] = $locale;
-            }
-        }
-        foreach ($requestedLocales as $locale) {
-            unset($locales[$locale]);
-        }
-        if (!empty($locales)) {
-            $langList = implode(', ', $locales);
-            $this->output->writeln(
-                "WARNING: there were files for the following languages detected in the file system: {$langList}."
-                . ' These languages were not requested, so the files will not be populated.'
-            );
+        if (null === $this->deployManagerFactory) {
+            $this->deployManagerFactory = ObjectManager::getInstance()->get(DeployManagerFactory::class);
         }
 
-        return [$areas, $files];
+        return $this->deployManagerFactory;
     }
 
     /**
-     * Emulate application area and various services that are necessary for populating files
+     * Populate all static view files for specified root path and list of languages
      *
-     * @param string $areaCode
-     * @return void
+     * @param ObjectManagerFactory $omFactory
+     * @param array $locales
+     * @param array $deployableAreaThemeMap
+     * @return int
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     * @deprecated
      */
-    private function emulateApplicationArea($areaCode)
+    public function deploy(ObjectManagerFactory $omFactory, array $locales, array $deployableAreaThemeMap = [])
     {
-        $this->objectManager = $this->omFactory->create(
-            [\Magento\Framework\App\State::PARAM_MODE => \Magento\Framework\App\State::MODE_DEFAULT]
+        /** @var DeployManager $deployerManager */
+        $deployerManager = $this->getDeployManagerFactory()->create(
+            ['options' => $this->options, 'output' => $this->output]
         );
-        /** @var \Magento\Framework\App\State $appState */
-        $appState = $this->objectManager->get('Magento\Framework\App\State');
-        $appState->setAreaCode($areaCode);
-        $this->assetRepo = $this->objectManager->get('Magento\Framework\View\Asset\Repository');
-        $this->assetPublisher = $this->objectManager->create('Magento\Framework\App\View\Asset\Publisher');
-        $this->htmlMinifier = $this->objectManager->get('Magento\Framework\View\Template\Html\MinifierInterface');
-        $this->bundleManager = $this->objectManager->get('Magento\Framework\View\Asset\Bundle\Manager');
 
+        foreach ($deployableAreaThemeMap as $area => $themes) {
+            foreach ($locales as $locale) {
+                foreach ($themes as $themePath) {
+                    $deployerManager->addPack($area, $themePath, $locale);
+                }
+            }
+        }
+        return $deployerManager->deploy();
     }
 
     /**
@@ -276,112 +118,10 @@ class Deployer
      * @param string $locale
      * @param string $area
      * @return void
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     * @deprecated
      */
     protected function emulateApplicationLocale($locale, $area)
     {
-        /** @var \Magento\Framework\TranslateInterface $translator */
-        $translator = $this->objectManager->get('Magento\Framework\TranslateInterface');
-        $translator->setLocale($locale);
-        $translator->loadData($area, true);
-        /** @var \Magento\Framework\Locale\ResolverInterface $localeResolver */
-        $localeResolver = $this->objectManager->get('Magento\Framework\Locale\ResolverInterface');
-        $localeResolver->setLocale($locale);
-    }
-
-    /**
-     * Deploy a static view file
-     *
-     * @param string $filePath
-     * @param string $area
-     * @param string $themePath
-     * @param string $locale
-     * @param string $module
-     * @return string
-     * @throws \InvalidArgumentException
-     * @throws LocalizedException
-     *
-     * @SuppressWarnings(PHPMD.NPathComplexity)
-     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
-     */
-    private function deployFile($filePath, $area, $themePath, $locale, $module)
-    {
-        $compiledFile = '';
-        $extension = pathinfo($filePath, PATHINFO_EXTENSION);
-
-        foreach ($this->alternativeSources as $name => $alternative) {
-            if (in_array($extension, $alternative->getAlternativesExtensionsNames(), true)
-                && strpos(basename($filePath), '_') !== 0
-            ) {
-                $compiledFile = substr($filePath, 0, strlen($filePath) - strlen($extension) - 1);
-                $compiledFile = $compiledFile . '.' . $name;
-            }
-        }
-
-        if ($this->output->isVeryVerbose()) {
-            $logMessage = "Processing file '$filePath' for area '$area', theme '$themePath', locale '$locale'";
-            if ($module) {
-                $logMessage .= ", module '$module'";
-            }
-            $this->output->writeln($logMessage);
-        }
-
-        try {
-            $asset = $this->assetRepo->createAsset(
-                $filePath,
-                ['area' => $area, 'theme' => $themePath, 'locale' => $locale, 'module' => $module]
-            );
-            if ($this->output->isVeryVerbose()) {
-                $this->output->writeln("\tDeploying the file to '{$asset->getPath()}'");
-            } else {
-                $this->output->write('.');
-            }
-            if ($this->isDryRun) {
-                $asset->getContent();
-            } else {
-                $this->assetPublisher->publish($asset);
-                $this->bundleManager->addAsset($asset);
-            }
-            $this->count++;
-        } catch (ContentProcessorException $exception) {
-            throw $exception;
-        } catch (\Exception $exception) {
-            $this->output->write('.');
-            $this->verboseLog($exception->getTraceAsString());
-            $this->errorCount++;
-        }
-
-        return $compiledFile;
-    }
-
-    /**
-     * Find ancestor themes' full paths
-     *
-     * @param string $themeFullPath
-     * @return string[]
-     */
-    private function findAncestors($themeFullPath)
-    {
-        /** @var \Magento\Framework\View\Design\Theme\ListInterface $themeCollection */
-        $themeCollection = $this->objectManager->get('Magento\Framework\View\Design\Theme\ListInterface');
-        $theme = $themeCollection->getThemeByFullPath($themeFullPath);
-        $ancestors = $theme->getInheritedThemes();
-        $ancestorThemeFullPath = [];
-        foreach ($ancestors as $ancestor) {
-            $ancestorThemeFullPath[] = $ancestor->getFullPath();
-        }
-        return $ancestorThemeFullPath;
-    }
-
-    /**
-     * Verbose log
-     *
-     * @param string $message
-     * @return void
-     */
-    private function verboseLog($message)
-    {
-        if ($this->output->isVerbose()) {
-            $this->output->writeln($message);
-        }
     }
 }
diff --git a/vendor/magento/module-deploy/Model/Process.php b/vendor/magento/module-deploy/Model/Process.php
new file mode 100644
index 0000000..0737777
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/Process.php
@@ -0,0 +1,79 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+class Process
+{
+    /** @var int */
+    private $pid;
+
+    /** @var null|int */
+    private $status;
+
+    /** @var callable */
+    private $handler;
+
+    /**
+     * @param callable $handler
+     */
+    public function __construct($handler)
+    {
+        $this->pid = 0;
+        $this->status = null;
+        $this->handler = $handler;
+    }
+
+    /**
+     * @return int
+     */
+    public function getPid()
+    {
+        return $this->pid;
+    }
+
+    /**
+     * @param int $pid
+     * @return void
+     */
+    public function setPid($pid)
+    {
+        $this->pid = $pid;
+    }
+
+    /**
+     * @return void
+     * @SuppressWarnings(PHPMD.ExitExpression)
+     */
+    public function run()
+    {
+        $status = call_user_func($this->handler, $this);
+
+        $status = is_integer($status) ? $status : 0;
+        exit($status);
+    }
+
+    /**
+     * @return bool
+     */
+    public function isCompleted()
+    {
+        $pid = pcntl_waitpid($this->getPid(), $status, WNOHANG);
+        if ($pid == -1 || $pid === $this->getPid()) {
+            $this->status = pcntl_wexitstatus($status);
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * @return int|null
+     */
+    public function getStatus()
+    {
+        return $this->status;
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/ProcessManager.php b/vendor/magento/module-deploy/Model/ProcessManager.php
new file mode 100644
index 0000000..9490f6d
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/ProcessManager.php
@@ -0,0 +1,107 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+class ProcessManager
+{
+    /** @var Process[] */
+    private $processes = [];
+
+    /**
+     * @var ProcessFactory
+     */
+    private $processFactory;
+
+    /**
+     * ProcessManager constructor.
+     * @param ProcessFactory $processFactory
+     */
+    public function __construct(ProcessFactory $processFactory)
+    {
+        $this->processFactory = $processFactory;
+    }
+
+    /**
+     * Forks the currently running process.
+     *
+     * @param callable $handler
+     *
+     * @return Process
+     * @throws \RuntimeException
+     * @SuppressWarnings(PHPMD.ExitExpression)
+     */
+    public function fork(callable $handler)
+    {
+        $process = $this->createProcess($handler);
+        $pid = pcntl_fork();
+
+        if ($pid === -1) {
+            throw new \RuntimeException('Unable to fork a new process');
+        }
+
+        if ($pid) {
+            $process->setPid($pid);
+            $this->processes[$pid] = $process;
+            return $process;
+        }
+
+        // process child process
+        $this->processes = [];
+        $process->setPid(getmypid());
+        $process->run();
+
+        exit(0);
+    }
+
+    /**
+     * @return Process[]
+     */
+    public function getProcesses()
+    {
+        return $this->processes;
+    }
+
+    /**
+     * @param Process $process
+     * @return void
+     */
+    public function delete(Process $process)
+    {
+        unset($this->processes[$process->getPid()]);
+    }
+
+    /**
+     * @param callable $handler
+     * @return Process
+     */
+    private function createProcess(callable $handler)
+    {
+        return $this->processFactory->create(['handler' => $handler]);
+    }
+
+    /**
+     * Protect against zombie process
+     * @return void
+     * @SuppressWarnings(PHPMD.UnusedLocalVariable)
+     */
+    private function freeResources()
+    {
+        foreach ($this->processes as $process) {
+            if (pcntl_waitpid($process->getPid(), $status) === -1) {
+                throw new \RuntimeException('Error while waiting for process '. $process->getPid());
+            }
+        }
+    }
+
+    /**
+     * Free resources
+     */
+    public function __destruct()
+    {
+        $this->freeResources();
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/ProcessQueueManager.php b/vendor/magento/module-deploy/Model/ProcessQueueManager.php
new file mode 100644
index 0000000..c96a2db
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/ProcessQueueManager.php
@@ -0,0 +1,160 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+use Magento\Framework\App\ResourceConnection;
+
+class ProcessQueueManager
+{
+    /**
+     * Default max amount of processes
+     */
+    const DEFAULT_MAX_PROCESSES_AMOUNT = 4;
+
+    /**
+     * @var ProcessTask[]
+     */
+    private $tasksQueue = [];
+
+    /**
+     * @var ProcessTask[]
+     */
+    private $processTaskMap = [];
+
+    /**
+     * @var int
+     */
+    private $maxProcesses;
+
+    /**
+     * @var ProcessManager
+     */
+    private $processManager;
+
+    /**
+     * @var ResourceConnection
+     */
+    private $resourceConnection;
+
+    /**
+     * @var ProcessTaskFactory
+     */
+    private $processTaskFactory;
+
+    /**
+     * @param ProcessManager $processManager
+     * @param ResourceConnection $resourceConnection
+     * @param ProcessTaskFactory $processTaskFactory
+     * @param int $maxProcesses
+     */
+    public function __construct(
+        ProcessManager $processManager,
+        ResourceConnection $resourceConnection,
+        ProcessTaskFactory $processTaskFactory,
+        $maxProcesses = self::DEFAULT_MAX_PROCESSES_AMOUNT
+    ) {
+        $this->processManager = $processManager;
+        $this->resourceConnection = $resourceConnection;
+        $this->processTaskFactory = $processTaskFactory;
+        $this->maxProcesses = $maxProcesses;
+    }
+
+    /**
+     * @param callable $task
+     * @param callable[] $dependentTasks
+     * @return void
+     */
+    public function addTaskToQueue(callable $task, $dependentTasks = [])
+    {
+        $dependentTasks = array_map(function (callable $task) {
+            return $this->createTask($task);
+        }, $dependentTasks);
+
+        $task = $this->createTask($task, $dependentTasks);
+        $this->tasksQueue[$task->getId()] = $task;
+    }
+
+    /**
+     * Process tasks queue
+     * @return int
+     */
+    public function process()
+    {
+        $processQueue = [];
+        $this->internalQueueProcess($this->tasksQueue, $processQueue);
+
+        $returnStatus = 0;
+        while (count($this->processManager->getProcesses()) > 0) {
+            foreach ($this->processManager->getProcesses() as $process) {
+                if ($process->isCompleted()) {
+                    $dependedTasks = isset($this->processTaskMap[$process->getPid()])
+                        ? $this->processTaskMap[$process->getPid()]
+                        : [];
+
+                    $this->processManager->delete($process);
+                    $returnStatus |= $process->getStatus();
+
+                    $this->internalQueueProcess(array_merge($processQueue, $dependedTasks), $processQueue);
+
+                    if (count($this->processManager->getProcesses()) >= $this->maxProcesses) {
+                        break 1;
+                    }
+                }
+            }
+            usleep(5000);
+        }
+        $this->resourceConnection->closeConnection();
+
+        return $returnStatus;
+    }
+
+    /**
+     * @param ProcessTask[] $taskQueue
+     * @param ProcessTask[] $processQueue
+     * @return void
+     */
+    private function internalQueueProcess($taskQueue, &$processQueue)
+    {
+        $processNumber = count($this->processManager->getProcesses());
+        foreach ($taskQueue as $task) {
+            if ($processNumber >= $this->maxProcesses) {
+                if (!isset($processQueue[$task->getId()])) {
+                    $processQueue[$task->getId()] = $task;
+                }
+            } else {
+                unset($processQueue[$task->getId()]);
+                $this->fork($task);
+                $processNumber++;
+            }
+        }
+    }
+
+    /**
+     * @param callable $handler
+     * @param array $dependentTasks
+     * @return ProcessTask
+     */
+    private function createTask($handler, $dependentTasks = [])
+    {
+        return $this->processTaskFactory->create(['handler' => $handler, 'dependentTasks' => $dependentTasks]);
+    }
+
+    /**
+     * @param ProcessTask $task
+     * @return void
+     */
+    private function fork(ProcessTask $task)
+    {
+        $process = $this->processManager->fork($task->getHandler());
+        if ($task->getDependentTasks()) {
+            $pid = $process->getPid();
+            foreach ($task->getDependentTasks() as $dependentTask) {
+                $this->processTaskMap[$pid][$dependentTask->getId()] = $dependentTask;
+            }
+        }
+    }
+}
diff --git a/vendor/magento/module-deploy/Model/ProcessTask.php b/vendor/magento/module-deploy/Model/ProcessTask.php
new file mode 100644
index 0000000..8db7439
--- /dev/null
+++ b/vendor/magento/module-deploy/Model/ProcessTask.php
@@ -0,0 +1,60 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Model;
+
+class ProcessTask
+{
+    /**
+     * @var string
+     */
+    private $taskId;
+
+    /**
+     * @var callable
+     */
+    private $handler;
+
+    /**
+     * @var array
+     */
+    private $dependentTasks;
+
+    /**
+     * @param callable $handler
+     * @param array $dependentTasks
+     */
+    public function __construct($handler, array $dependentTasks = [])
+    {
+        $this->taskId = uniqid('', true);
+        $this->handler = $handler;
+        $this->dependentTasks = $dependentTasks;
+    }
+
+    /**
+     * @return callable
+     */
+    public function getHandler()
+    {
+        return $this->handler;
+    }
+
+    /**
+     * @return string
+     */
+    public function getId()
+    {
+        return $this->taskId;
+    }
+
+    /**
+     * @return ProcessTask[]
+     */
+    public function getDependentTasks()
+    {
+        return $this->dependentTasks;
+    }
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Console/Command/DeployStaticContentCommandTest.php b/vendor/magento/module-deploy/Test/Unit/Console/Command/DeployStaticContentCommandTest.php
index 6bd8f79..c758807 100644
--- a/vendor/magento/module-deploy/Test/Unit/Console/Command/DeployStaticContentCommandTest.php
+++ b/vendor/magento/module-deploy/Test/Unit/Console/Command/DeployStaticContentCommandTest.php
@@ -8,11 +8,14 @@ namespace Magento\Deploy\Test\Unit\Console\Command;
 use Magento\Deploy\Console\Command\DeployStaticContentCommand;
 use Symfony\Component\Console\Tester\CommandTester;
 use Magento\Framework\Validator\Locale;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+
+require 'FunctionExistMock.php';
 
 class DeployStaticContentCommandTest extends \PHPUnit_Framework_TestCase
 {
     /**
-     * @var \Magento\Deploy\Model\Deployer|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Magento\Deploy\Model\DeployManager|\PHPUnit_Framework_MockObject_MockObject
      */
     private $deployer;
 
@@ -43,34 +46,92 @@ class DeployStaticContentCommandTest extends \PHPUnit_Framework_TestCase
 
     protected function setUp()
     {
-        $this->objectManager = $this->getMockForAbstractClass('Magento\Framework\ObjectManagerInterface');
-        $this->objectManagerFactory = $this->getMock('Magento\Framework\App\ObjectManagerFactory', [], [], '', false);
-        $this->deployer = $this->getMock('Magento\Deploy\Model\Deployer', [], [], '', false);
-        $this->filesUtil = $this->getMock('Magento\Framework\App\Utility\Files', [], [], '', false);
-        $this->validator = $this->getMock('Magento\Framework\Validator\Locale', [], [], '', false);
-        $this->command = new DeployStaticContentCommand(
-            $this->objectManagerFactory,
-            $this->validator,
-            $this->objectManager
+        $this->objectManager = $this->getMockForAbstractClass(\Magento\Framework\ObjectManagerInterface::class);
+        $this->objectManagerFactory = $this->getMock(
+            \Magento\Framework\App\ObjectManagerFactory::class,
+            [],
+            [],
+            '',
+            false
         );
+        $this->deployer = $this->getMock(\Magento\Deploy\Model\DeployManager::class, [], [], '', false);
+        $this->filesUtil = $this->getMock(\Magento\Framework\App\Utility\Files::class, [], [], '', false);
+
+        $this->validator = $this->getMock(\Magento\Framework\Validator\Locale::class, [], [], '', false);
+        $this->command = (new ObjectManager($this))->getObject(DeployStaticContentCommand::class, [
+            'objectManagerFactory' => $this->objectManagerFactory,
+            'validator' => $this->validator,
+            'objectManager' => $this->objectManager,
+        ]);
     }
 
     public function testExecute()
     {
+        $this->filesUtil->expects(self::any())->method('getStaticPreProcessingFiles')->willReturn([]);
         $this->deployer->expects($this->once())->method('deploy');
+        $this->objectManager->expects($this->at(0))->method('create')->willReturn($this->filesUtil);
+        $this->objectManager->expects($this->at(1))->method('create')->willReturn($this->deployer);
 
-        $this->objectManager->expects($this->at(0))
-            ->method('create')
-            ->willReturn($this->filesUtil);
+        $tester = new CommandTester($this->command);
+        $tester->execute([]);
+    }
 
-        $this->objectManager->expects($this->at(1))
-            ->method('create')
-            ->willReturn($this->deployer);
+    public function testExecuteValidateLanguages()
+    {
+        $this->filesUtil->expects(self::any())->method('getStaticPreProcessingFiles')->willReturn([]);
+        $this->deployer->expects($this->once())->method('deploy');
+        $this->objectManager->expects($this->at(0))->method('create')->willReturn($this->filesUtil);
+        $this->objectManager->expects($this->at(1))->method('create')->willReturn($this->deployer);
+        $this->validator->expects(self::exactly(2))->method('isValid')->willReturnMap([
+            ['en_US', true],
+            ['uk_UA', true],
+        ]);
 
-        $this->validator->expects($this->once())->method('isValid')->with('en_US')->willReturn(true);
+        $tester = new CommandTester($this->command);
+        $tester->execute(['languages' => ['en_US', 'uk_UA']]);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     * @expectedExceptionMessage --language (-l) and --exclude-language cannot be used at the same tim
+     */
+    public function testExecuteIncludedExcludedLanguages()
+    {
+        $this->filesUtil->expects(self::any())->method('getStaticPreProcessingFiles')->willReturn([]);
+        $this->objectManager->expects($this->at(0))->method('create')->willReturn($this->filesUtil);
+        $this->validator->expects(self::exactly(2))->method('isValid')->willReturnMap([
+            ['en_US', true],
+            ['uk_UA', true],
+        ]);
 
         $tester = new CommandTester($this->command);
-        $tester->execute([]);
+        $tester->execute(['--language' => ['en_US', 'uk_UA'], '--exclude-language' => 'ru_RU']);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     * @expectedExceptionMessage --area (-a) and --exclude-area cannot be used at the same tim
+     */
+    public function testExecuteIncludedExcludedAreas()
+    {
+        $this->filesUtil->expects(self::any())->method('getStaticPreProcessingFiles')->willReturn([]);
+        $this->objectManager->expects($this->at(0))->method('create')->willReturn($this->filesUtil);
+
+        $tester = new CommandTester($this->command);
+        $tester->execute(['--area' => ['a1', 'a2'], '--exclude-area' => 'a3']);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     * @expectedExceptionMessage --theme (-t) and --exclude-theme cannot be used at the same tim
+     */
+    public function testExecuteIncludedExcludedThemes()
+    {
+        $this->filesUtil->expects(self::any())->method('getStaticPreProcessingFiles')->willReturn([]);
+        $this->objectManager->expects($this->at(0))->method('create')->willReturn($this->filesUtil);
+
+        $tester = new CommandTester($this->command);
+        $tester->execute(['--theme' => ['t1', 't2'], '--exclude-theme' => 't3']);
     }
 
     /**
@@ -79,6 +140,10 @@ class DeployStaticContentCommandTest extends \PHPUnit_Framework_TestCase
      */
     public function testExecuteInvalidLanguageArgument()
     {
+        $this->filesUtil->expects(self::any())->method('getStaticPreProcessingFiles')->willReturn([]);
+        $this->objectManager->expects($this->at(0))
+            ->method('create')
+            ->willReturn($this->filesUtil);
         $wrongParam = ['languages' => ['ARG_IS_WRONG']];
         $commandTester = new CommandTester($this->command);
         $commandTester->execute($wrongParam);
diff --git a/vendor/magento/module-deploy/Test/Unit/Console/Command/FunctionExistMock.php b/vendor/magento/module-deploy/Test/Unit/Console/Command/FunctionExistMock.php
new file mode 100644
index 0000000..4875cc7
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Console/Command/FunctionExistMock.php
@@ -0,0 +1,16 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\Deploy\Console\Command;
+
+/**
+ * @param $func
+ * @return bool
+ */
+function function_exists($func)
+{
+    return $func !== 'pcntl_fork';
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Model/Deploy/LocaleDeployTest.php b/vendor/magento/module-deploy/Test/Unit/Model/Deploy/LocaleDeployTest.php
new file mode 100644
index 0000000..757da13
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Model/Deploy/LocaleDeployTest.php
@@ -0,0 +1,214 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Deploy\Test\Unit\Model\Deploy;
+
+use Magento\Framework\App\Utility\Files;
+use Magento\Framework\App\View\Asset\Publisher;
+use Magento\Framework\Translate\Js\Config;
+use Magento\Framework\View\Asset\Minification;
+use Magento\Framework\View\Asset\Repository;
+use Magento\Framework\View\Asset\RepositoryFactory;
+use Psr\Log\LoggerInterface;
+use Symfony\Component\Console\Output\OutputInterface;
+
+/**
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ */
+class LocaleDeployTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|Config
+     */
+    private $jsTranslationMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|Minification
+     */
+    private $minificationMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|RepositoryFactory
+     */
+    private $assetRepoFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\RequireJs\Model\FileManagerFactory
+     */
+    private $fileManagerFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\RequireJs\ConfigFactory
+     */
+    private $configFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\View\Asset\Bundle\Manager
+     */
+    private $bundleManagerMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|Files
+     */
+    private $filesUtilMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\View\DesignInterfaceFactory
+     */
+    private $designFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\Locale\ResolverInterface
+     */
+    private $localeResolverMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|OutputInterface
+     */
+    private $outputMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|LoggerInterface
+     */
+    private $loggerMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject
+     */
+    private $assetRepoMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject
+     */
+    private $assetPublisherMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject
+     */
+    private $themeProviderMock;
+
+    protected function setUp()
+    {
+        $this->outputMock = $this->getMock(OutputInterface::class, [], [], '', false);
+        $this->loggerMock = $this->getMock(LoggerInterface::class, [], [], '', false);
+        $this->filesUtilMock = $this->getMock(Files::class, [], [], '', false);
+        $this->assetRepoMock = $this->getMock(Repository::class, [], [], '', false);
+        $this->minificationMock = $this->getMock(Minification::class, [], [], '', false);
+        $this->jsTranslationMock = $this->getMock(Config::class, [], [], '', false);
+        $this->assetPublisherMock = $this->getMock(Publisher::class, [], [], '', false);
+        $this->assetRepoFactoryMock = $this->getMock(
+            RepositoryFactory::class,
+            ['create'],
+            [],
+            '',
+            false
+        );
+        $this->fileManagerFactoryMock = $this->getMock(
+            \Magento\RequireJs\Model\FileManagerFactory::class,
+            ['create'],
+            [],
+            '',
+            false
+        );
+        $this->configFactoryMock = $this->getMock(
+            \Magento\Framework\RequireJs\ConfigFactory::class,
+            ['create'],
+            [],
+            '',
+            false
+        );
+        $this->bundleManagerMock = $this->getMock(
+            \Magento\Framework\View\Asset\Bundle\Manager::class,
+            [],
+            [],
+            '',
+            false
+        );
+        $this->themeProviderMock = $this->getMock(
+            \Magento\Framework\View\Design\Theme\ThemeProviderInterface::class,
+            [],
+            [],
+            '',
+            false
+        );
+        $this->designFactoryMock = $this->getMock(
+            \Magento\Framework\View\DesignInterfaceFactory::class,
+            ['create'],
+            [],
+            '',
+            false
+        );
+        $this->localeResolverMock = $this->getMock(
+            \Magento\Framework\Locale\ResolverInterface::class,
+            [],
+            [],
+            '',
+            false
+        );
+    }
+
+    public function testDeploy()
+    {
+        $area = 'adminhtml';
+        $themePath = '/theme/path';
+        $locale = 'en_US';
+
+        $designMock = $this->getMock(\Magento\Framework\View\DesignInterface::class, [], [], '', false);
+        $assetRepoMock = $this->getMock(Repository::class, [], [], '', false);
+        $requireJsConfigMock = $this->getMock(\Magento\Framework\RequireJs\Config::class, [], [], '', false);
+        $fileManagerMock = $this->getMock(\Magento\RequireJs\Model\FileManager::class, [], [], '', false);
+
+        $model = $this->getModel([\Magento\Deploy\Console\Command\DeployStaticOptionsInterface::NO_JAVASCRIPT => 0]);
+
+        $this->localeResolverMock->expects($this->once())->method('setLocale')->with($locale);
+        $this->designFactoryMock->expects($this->once())->method('create')->willReturn($designMock);
+        $designMock->expects($this->once())->method('setDesignTheme')->with($themePath, $area)->willReturnSelf();
+        $this->assetRepoFactoryMock->expects($this->once())->method('create')->with(['design' => $designMock])
+            ->willReturn($assetRepoMock);
+        $this->configFactoryMock->expects($this->once())->method('create')->willReturn($requireJsConfigMock);
+        $this->fileManagerFactoryMock->expects($this->once())->method('create')->willReturn($fileManagerMock);
+
+        $fileManagerMock->expects($this->once())->method('createRequireJsConfigAsset')->willReturnSelf();
+        $this->filesUtilMock->expects($this->once())->method('getStaticPreProcessingFiles')->willReturn([]);
+        $this->filesUtilMock->expects($this->once())->method('getStaticLibraryFiles')->willReturn([]);
+
+        $this->jsTranslationMock->expects($this->once())->method('dictionaryEnabled')->willReturn(false);
+        $this->minificationMock->expects($this->once())->method('isEnabled')->with('js')->willReturn(true);
+        $fileManagerMock->expects($this->once())->method('createMinResolverAsset')->willReturnSelf();
+
+        $this->bundleManagerMock->expects($this->once())->method('flush');
+
+        $this->assertEquals(
+            \Magento\Framework\Console\Cli::RETURN_SUCCESS,
+            $model->deploy($area, $themePath, $locale)
+        );
+    }
+
+    /**
+     * @param array $options
+     * @return \Magento\Deploy\Model\Deploy\LocaleDeploy
+     */
+    private function getModel($options = [])
+    {
+        return new \Magento\Deploy\Model\Deploy\LocaleDeploy(
+            $this->outputMock,
+            $this->jsTranslationMock,
+            $this->minificationMock,
+            $this->assetRepoMock,
+            $this->assetRepoFactoryMock,
+            $this->fileManagerFactoryMock,
+            $this->configFactoryMock,
+            $this->assetPublisherMock,
+            $this->bundleManagerMock,
+            $this->themeProviderMock,
+            $this->loggerMock,
+            $this->filesUtilMock,
+            $this->designFactoryMock,
+            $this->localeResolverMock,
+            [],
+            $options
+        );
+    }
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Model/Deploy/LocaleQuickDeployTest.php b/vendor/magento/module-deploy/Test/Unit/Model/Deploy/LocaleQuickDeployTest.php
new file mode 100644
index 0000000..0c7d459
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Model/Deploy/LocaleQuickDeployTest.php
@@ -0,0 +1,114 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Deploy\Test\Unit\Model\Deploy;
+
+use Magento\Deploy\Model\Deploy\DeployInterface;
+use Magento\Deploy\Model\Deploy\LocaleQuickDeploy;
+use Magento\Framework\Filesystem\Directory\WriteInterface;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+use Symfony\Component\Console\Output\OutputInterface;
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface as Options;
+use \Magento\Framework\RequireJs\Config as RequireJsConfig;
+
+class LocaleQuickDeployTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var OutputInterface|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $outputMock;
+
+    /**
+     * @var WriteInterface|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $staticDirectoryMock;
+
+    protected function setUp()
+    {
+        $this->outputMock = $this->getMockBuilder(OutputInterface::class)
+            ->setMethods(['writeln'])
+            ->getMockForAbstractClass();
+
+        $this->staticDirectoryMock = $this->getMockBuilder(WriteInterface::class)
+            ->setMethods(['createSymlink', 'getAbsolutePath', 'getRelativePath', 'copyFile', 'readRecursively'])
+            ->getMockForAbstractClass();
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     * @expectedExceptionMessage Deploy base locale must be set for Quick Deploy
+     */
+    public function testDeployWithoutBaseLocale()
+    {
+        $this->getModel()->deploy('adminhtml', 'Magento/backend', 'en_US');
+    }
+
+    public function testDeployWithSymlinkStrategy()
+    {
+        $area = 'adminhtml';
+        $themePath = 'Magento/backend';
+        $locale = 'uk_UA';
+        $baseLocal = 'en_US';
+
+        $this->staticDirectoryMock->expects(self::exactly(2))
+            ->method('createSymlink')
+            ->withConsecutive(
+                ['adminhtml/Magento/backend/en_US', 'adminhtml/Magento/backend/uk_UA'],
+                ['_requirejs/adminhtml/Magento/backend/en_US', '_requirejs/adminhtml/Magento/backend/uk_UA']
+            );
+
+        $model = $this->getModel([
+            DeployInterface::DEPLOY_BASE_LOCALE => $baseLocal,
+            Options::SYMLINK_LOCALE => 1,
+        ]);
+        $model->deploy($area, $themePath, $locale);
+    }
+
+    public function testDeployWithCopyStrategy()
+    {
+
+        $area = 'adminhtml';
+        $themePath = 'Magento/backend';
+        $locale = 'uk_UA';
+        $baseLocal = 'en_US';
+
+        $this->staticDirectoryMock->expects(self::never())->method('createSymlink');
+        $this->staticDirectoryMock->expects(self::exactly(2))->method('readRecursively')->willReturnMap([
+            ['adminhtml/Magento/backend/en_US', [$baseLocal . 'file1', $baseLocal . 'dir']],
+            [RequireJsConfig::DIR_NAME  . '/adminhtml/Magento/backend/en_US', [$baseLocal . 'file2']]
+        ]);
+        $this->staticDirectoryMock->expects(self::exactly(3))->method('isFile')->willReturnMap([
+            [$baseLocal . 'file1', true],
+            [$baseLocal . 'dir', false],
+            [$baseLocal . 'file2', true],
+        ]);
+        $this->staticDirectoryMock->expects(self::exactly(2))->method('copyFile')->withConsecutive(
+            [$baseLocal . 'file1', $locale . 'file1', null],
+            [$baseLocal . 'file2', $locale . 'file2', null]
+        );
+
+        $model = $this->getModel([
+            DeployInterface::DEPLOY_BASE_LOCALE => $baseLocal,
+            Options::SYMLINK_LOCALE => 0,
+        ]);
+        $model->deploy($area, $themePath, $locale);
+    }
+
+    /**
+     * @param array $options
+     * @return LocaleQuickDeploy
+     */
+    private function getModel($options = [])
+    {
+        return (new ObjectManager($this))->getObject(
+            LocaleQuickDeploy::class,
+            [
+                'output' => $this->outputMock,
+                'staticDirectory' => $this->staticDirectoryMock,
+                'options' => $options
+            ]
+        );
+    }
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Model/Deploy/TemplateMinifierTest.php b/vendor/magento/module-deploy/Test/Unit/Model/Deploy/TemplateMinifierTest.php
new file mode 100644
index 0000000..e6859fa
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Model/Deploy/TemplateMinifierTest.php
@@ -0,0 +1,56 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Deploy\Test\Unit\Model\Deploy;
+
+/**
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ */
+class TemplateMinifierTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var \Magento\Deploy\Model\Deploy\TemplateMinifier
+     */
+    private $model;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\App\Utility\Files
+     */
+    private $filesUtilsMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\View\Template\Html\MinifierInterface
+     */
+    private $minifierMock;
+
+    protected function setUp()
+    {
+        $this->minifierMock = $this->getMock(
+            \Magento\Framework\View\Template\Html\MinifierInterface::class,
+            [],
+            [],
+            '',
+            false
+        );
+        $this->filesUtilsMock = $this->getMock(\Magento\Framework\App\Utility\Files::class, [], [], '', false);
+
+        $this->model = new \Magento\Deploy\Model\Deploy\TemplateMinifier(
+            $this->filesUtilsMock,
+            $this->minifierMock
+        );
+    }
+
+    public function testMinifyTemplates()
+    {
+        $templateMock = "template.phtml";
+        $templatesMock = [$templateMock];
+
+        $this->filesUtilsMock->expects($this->once())->method('getPhtmlFiles')->with(false, false)
+            ->willReturn($templatesMock);
+        $this->minifierMock->expects($this->once())->method('minify')->with($templateMock);
+
+        self::assertEquals(1, $this->model->minifyTemplates());
+    }
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Model/DeployManagerTest.php b/vendor/magento/module-deploy/Test/Unit/Model/DeployManagerTest.php
new file mode 100644
index 0000000..b9a9f60
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Model/DeployManagerTest.php
@@ -0,0 +1,168 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Deploy\Test\Unit\Model;
+
+use Magento\Deploy\Console\Command\DeployStaticOptionsInterface as Options;
+
+/**
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ */
+class DeployManagerTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Deploy\Model\DeployStrategyProviderFactory
+     */
+    private $deployStrategyProviderFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Symfony\Component\Console\Output\OutputInterface
+     */
+    private $outputMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\App\View\Deployment\Version\StorageInterface
+     */
+    private $versionStorageMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Deploy\Model\Deploy\TemplateMinifier
+     */
+    private $minifierTemplateMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Deploy\Model\ProcessQueueManagerFactory
+     */
+    private $processQueueManagerFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\App\State
+     */
+    private $stateMock;
+
+    protected function setUp()
+    {
+        $this->deployStrategyProviderFactoryMock = $this->getMock(
+            \Magento\Deploy\Model\DeployStrategyProviderFactory::class,
+            ['create'],
+            [],
+            '',
+            false
+        );
+        $this->versionStorageMock = $this->getMock(
+            \Magento\Framework\App\View\Deployment\Version\StorageInterface::class,
+            [],
+            [],
+            '',
+            false
+        );
+        $this->minifierTemplateMock = $this->getMock(
+            \Magento\Deploy\Model\Deploy\TemplateMinifier::class,
+            [],
+            [],
+            '',
+            false
+        );
+        $this->processQueueManagerFactoryMock = $this->getMock(
+            \Magento\Deploy\Model\ProcessQueueManagerFactory::class,
+            [],
+            [],
+            '',
+            false
+        );
+        $this->stateMock = $this->getMockBuilder(\Magento\Framework\App\State::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $this->outputMock = $this->getMock(\Symfony\Component\Console\Output\OutputInterface::class, [], [], '', false);
+    }
+
+    public function testSaveDeployedVersion()
+    {
+        $version = (new \DateTime())->getTimestamp();
+        $this->outputMock->expects($this->once())->method('writeln')->with("New version of deployed files: {$version}");
+        $this->versionStorageMock->expects($this->once())->method('save')->with($version);
+
+        $this->assertEquals(
+            \Magento\Framework\Console\Cli::RETURN_SUCCESS,
+            $this->getModel([Options::NO_HTML_MINIFY => true])->deploy()
+        );
+    }
+
+    public function testSaveDeployedVersionDryRun()
+    {
+        $options = [Options::DRY_RUN => true, Options::NO_HTML_MINIFY => true];
+
+        $this->outputMock->expects(self::once())->method('writeln')->with(
+            'Dry run. Nothing will be recorded to the target directory.'
+        );
+        $this->versionStorageMock->expects($this->never())->method('save');
+
+        $this->getModel($options)->deploy();
+    }
+
+    public function testMinifyTemplates()
+    {
+        $this->minifierTemplateMock->expects($this->once())->method('minifyTemplates')->willReturn(2);
+        $this->outputMock->expects($this->atLeastOnce())->method('writeln')->withConsecutive(
+            ["=== Minify templates ==="],
+            ["\nSuccessful: 2 files modified\n---\n"]
+        );
+
+        $this->getModel([Options::NO_HTML_MINIFY => false])->deploy();
+    }
+
+    public function testMinifyTemplatesNoHtmlMinify()
+    {
+        $version = (new \DateTime())->getTimestamp();
+        $this->outputMock->expects($this->once())->method('writeln')->with("New version of deployed files: {$version}");
+        $this->versionStorageMock->expects($this->once())->method('save')->with($version);
+
+        $this->getModel([Options::NO_HTML_MINIFY => true])->deploy();
+    }
+
+    public function testDeploy()
+    {
+        $area = 'frontend';
+        $themePath = 'themepath';
+        $locale = 'en_US';
+        $options = [Options::NO_HTML_MINIFY => true];
+        $strategyProviderMock = $this->getMock(\Magento\Deploy\Model\DeployStrategyProvider::class, [], [], '', false);
+        $deployStrategyMock = $this->getMock(\Magento\Deploy\Model\Deploy\DeployInterface::class, [], [], '', false);
+
+        $model = $this->getModel($options);
+        $model->addPack($area, $themePath, $locale);
+        $this->deployStrategyProviderFactoryMock->expects($this->once())->method('create')->with(
+            ['output' => $this->outputMock, 'options' => $options]
+        )->willReturn($strategyProviderMock);
+        $strategyProviderMock->expects($this->once())->method('getDeployStrategies')->with($area, $themePath, [$locale])
+            ->willReturn([$locale => $deployStrategyMock]);
+        $this->stateMock->expects(self::once())->method('emulateAreaCode')
+            ->with($area, [$deployStrategyMock, 'deploy'], [$area, $themePath, $locale])
+            ->willReturn(\Magento\Framework\Console\Cli::RETURN_SUCCESS);
+
+        $version = (new \DateTime())->getTimestamp();
+        $this->outputMock->expects(self::once())->method('writeln')->with("New version of deployed files: {$version}");
+        $this->versionStorageMock->expects($this->once())->method('save')->with($version);
+
+        $this->assertEquals(\Magento\Framework\Console\Cli::RETURN_SUCCESS, $model->deploy());
+    }
+
+    /**
+     * @param array $options
+     * @return \Magento\Deploy\Model\DeployManager
+     */
+    private function getModel(array $options)
+    {
+        return new \Magento\Deploy\Model\DeployManager(
+            $this->outputMock,
+            $this->versionStorageMock,
+            $this->deployStrategyProviderFactoryMock,
+            $this->processQueueManagerFactoryMock,
+            $this->minifierTemplateMock,
+            $this->stateMock,
+            $options
+        );
+    }
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Model/DeployStrategyFactoryTest.php b/vendor/magento/module-deploy/Test/Unit/Model/DeployStrategyFactoryTest.php
new file mode 100644
index 0000000..2af443e
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Model/DeployStrategyFactoryTest.php
@@ -0,0 +1,53 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Deploy\Test\Unit\Model;
+
+use Magento\Deploy\Model\Deploy\LocaleDeploy;
+use Magento\Deploy\Model\DeployStrategyFactory;
+use Magento\Framework\ObjectManagerInterface;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+
+class DeployStrategyFactoryTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var ObjectManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $objectManagerMock;
+
+    /**
+     * @var DeployStrategyFactory
+     */
+    private $unit;
+
+    protected function setUp()
+    {
+        $this->objectManagerMock = $this->getMock(ObjectManagerInterface::class);
+
+        $this->unit = (new ObjectManager($this))->getObject(
+            DeployStrategyFactory::class,
+            [
+                'objectManager' => $this->objectManagerMock,
+            ]
+        );
+    }
+
+    /**
+     * @expectedException \Magento\Framework\Exception\InputException
+     * @expectedExceptionMessage Wrong deploy strategy type: wrong-type
+     */
+    public function testCreateWithWrongStrategyType()
+    {
+        $this->unit->create('wrong-type');
+    }
+
+    public function testCreate()
+    {
+        $this->objectManagerMock->expects(self::once())->method('create')
+            ->with(LocaleDeploy::class, ['arg1' => 1]);
+
+        $this->unit->create(DeployStrategyFactory::DEPLOY_STRATEGY_STANDARD, ['arg1' => 1]);
+    }
+}
diff --git a/vendor/magento/module-deploy/Test/Unit/Model/ProcessQueueManagerTest.php b/vendor/magento/module-deploy/Test/Unit/Model/ProcessQueueManagerTest.php
new file mode 100644
index 0000000..e770687
--- /dev/null
+++ b/vendor/magento/module-deploy/Test/Unit/Model/ProcessQueueManagerTest.php
@@ -0,0 +1,85 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Deploy\Test\Unit\Model;
+
+use Magento\Deploy\Model\ProcessManager;
+use Magento\Framework\App\ResourceConnection;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+use Magento\Deploy\Model\ProcessTaskFactory;
+use Magento\Deploy\Model\ProcessTask;
+
+class ProcessQueueManagerTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var \Magento\Deploy\Model\ProcessQueueManager
+     */
+    private $model;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Deploy\Model\ProcessManager
+     */
+    private $processManagerMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|\Magento\Framework\App\ResourceConnection
+     */
+    private $resourceConnectionMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|ProcessTaskFactory
+     */
+    private $processTaskFactoryMock;
+
+    /**
+     * @var \PHPUnit_Framework_MockObject_MockObject|ProcessTask
+     */
+    private $processTaskMock;
+
+    protected function setUp()
+    {
+        $this->processManagerMock = $this->getMock(ProcessManager::class, [], [], '', false);
+        $this->resourceConnectionMock = $this->getMock(ResourceConnection::class, [], [], '', false);
+        $this->processTaskFactoryMock = $this->getMock(ProcessTaskFactory::class, ['create'], [], '', false);
+        $this->processTaskMock = $this->getMock(ProcessTask::class, [], [], '', false);
+        $this->processTaskFactoryMock->expects($this->any())->method('create')->willReturn($this->processTaskMock);
+        $this->model = (new ObjectManager($this))->getObject(
+            \Magento\Deploy\Model\ProcessQueueManager::class,
+            [
+                'processManager' => $this->processManagerMock,
+                'resourceConnection' => $this->resourceConnectionMock,
+                'processTaskFactory' => $this->processTaskFactoryMock
+            ]
+        );
+    }
+
+    public function testProcess()
+    {
+        $callableMock = function () {
+            return true;
+        };
+        $this->processTaskMock->expects($this->any())->method('getHandler')->willReturn($callableMock);
+
+        $processMock = $this->getMock(\Magento\Deploy\Model\Process::class, [], [], '', false);
+
+        $this->model->addTaskToQueue($callableMock, []);
+        $this->processManagerMock->expects($this->atLeastOnce())->method('getProcesses')->willReturnOnConsecutiveCalls(
+            [$processMock],
+            [$processMock],
+            [$processMock],
+            [$processMock],
+            [$processMock],
+            []
+        );
+        $processMock->expects($this->once())->method('isCompleted')->willReturn(true);
+        $processMock->expects($this->atLeastOnce())->method('getPid')->willReturn(42);
+        $processMock->expects($this->once())->method('getStatus')->willReturn(0);
+        $this->processManagerMock->expects($this->once())->method('delete')->with($processMock);
+
+        $this->resourceConnectionMock->expects(self::once())->method('closeConnection');
+
+        $this->assertEquals(0, $this->model->process());
+    }
+}
diff --git a/vendor/magento/module-deploy/composer.json b/vendor/magento/module-deploy/composer.json
index 7417383..2fa28e1 100644
--- a/vendor/magento/module-deploy/composer.json
+++ b/vendor/magento/module-deploy/composer.json
@@ -5,7 +5,6 @@
         "php": "~5.6.0|7.0.2|~7.0.6",
         "magento/framework": "100.1.*",
         "magento/module-store": "100.1.*",
-        "magento/module-theme": "100.1.*",
         "magento/module-require-js": "100.1.*",
         "magento/module-user": "100.1.*"
     },
diff --git a/vendor/magento/module-deploy/etc/di.xml b/vendor/magento/module-deploy/etc/di.xml
index e1a0295..52c880c 100644
--- a/vendor/magento/module-deploy/etc/di.xml
+++ b/vendor/magento/module-deploy/etc/di.xml
@@ -13,6 +13,13 @@
             </argument>
         </arguments>
     </type>
+    <type name="Magento\Deploy\Model\Deploy\LocaleDeploy">
+        <arguments>
+            <argument name="alternativeSources" xsi:type="array">
+                <item name="css" xsi:type="object">AlternativeSourceProcessors</item>
+            </argument>
+        </arguments>
+    </type>
     <type name="Magento\Framework\Console\CommandListInterface">
         <arguments>
             <argument name="commands" xsi:type="array">
diff --git a/vendor/magento/module-require-js/Model/FileManager.php b/vendor/magento/module-require-js/Model/FileManager.php
index 1c6d559..90dfd96 100644
--- a/vendor/magento/module-require-js/Model/FileManager.php
+++ b/vendor/magento/module-require-js/Model/FileManager.php
@@ -174,6 +174,7 @@ class FileManager
 
     /**
      * Remove all bundles from pool
+     * @deprecated
      *
      * @return bool
      */
diff --git a/vendor/magento/module-theme/Model/Theme/ThemeProvider.php b/vendor/magento/module-theme/Model/Theme/ThemeProvider.php
index 29da9c3..9fd3ce9 100644
--- a/vendor/magento/module-theme/Model/Theme/ThemeProvider.php
+++ b/vendor/magento/module-theme/Model/Theme/ThemeProvider.php
@@ -23,6 +23,11 @@ class ThemeProvider implements \Magento\Framework\View\Design\Theme\ThemeProvide
     protected $cache;
 
     /**
+     * @var \Magento\Framework\View\Design\ThemeInterface[]
+     */
+    private $themes;
+
+    /**
      * ThemeProvider constructor.
      *
      * @param \Magento\Theme\Model\ResourceModel\Theme\CollectionFactory $collectionFactory
@@ -44,10 +49,14 @@ class ThemeProvider implements \Magento\Framework\View\Design\Theme\ThemeProvide
      */
     public function getThemeByFullPath($fullPath)
     {
+        if (isset($this->themes[$fullPath])) {
+            return $this->themes[$fullPath];
+        }
         /** @var $themeCollection \Magento\Theme\Model\ResourceModel\Theme\Collection */
         $theme = $this->cache->load('theme'. $fullPath);
         if ($theme) {
-            return unserialize($theme);
+            $this->themes[$fullPath] = unserialize($theme);
+            return $this->themes[$fullPath];
         }
         $themeCollection = $this->collectionFactory->create();
         $item = $themeCollection->getThemeByFullPath($fullPath);
@@ -55,7 +64,9 @@ class ThemeProvider implements \Magento\Framework\View\Design\Theme\ThemeProvide
             $themeData = serialize($item);
             $this->cache->save($themeData, 'theme' . $fullPath);
             $this->cache->save($themeData, 'theme-by-id-' . $item->getId());
+            $this->themes[$fullPath] = $item;
         }
+
         return $item;
     }
 
@@ -77,15 +88,20 @@ class ThemeProvider implements \Magento\Framework\View\Design\Theme\ThemeProvide
      */
     public function getThemeById($themeId)
     {
+        if (isset($this->themes[$themeId])) {
+            return $this->themes[$themeId];
+        }
         $theme = $this->cache->load('theme-by-id-' . $themeId);
         if ($theme) {
-            return unserialize($theme);
+            $this->themes[$themeId] = unserialize($theme);
+            return $this->themes[$themeId];
         }
         /** @var $themeModel \Magento\Framework\View\Design\ThemeInterface */
         $themeModel = $this->themeFactory->create();
         $themeModel->load($themeId);
         if ($themeModel->getId()) {
             $this->cache->save(serialize($themeModel), 'theme-by-id-' . $themeId);
+            $this->themes[$themeId] = $themeModel;
         }
         return $themeModel;
     }
diff --git a/dev/tests/integration/testsuite/Magento/Framework/View/Asset/MinifierTest.php b/dev/tests/integration/testsuite/Magento/Framework/View/Asset/MinifierTest.php
index 3cfeb69..c155ef8 100644
--- a/dev/tests/integration/testsuite/Magento/Framework/View/Asset/MinifierTest.php
+++ b/dev/tests/integration/testsuite/Magento/Framework/View/Asset/MinifierTest.php
@@ -14,6 +14,7 @@ use Magento\Framework\App\State as AppState;
  *
  * @magentoComponentsDir Magento/Framework/View/_files/static/theme
  * @magentoDbIsolation enabled
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class MinifierTest extends \PHPUnit_Framework_TestCase
 {
@@ -41,15 +42,15 @@ class MinifierTest extends \PHPUnit_Framework_TestCase
         $this->objectManager = Bootstrap::getInstance()->getObjectManager();
         /** @var \Magento\Theme\Model\Theme\Registration $registration */
         $registration = $this->objectManager->get(
-            'Magento\Theme\Model\Theme\Registration'
+            \Magento\Theme\Model\Theme\Registration::class
         );
         $registration->register();
         /** @var \Magento\TestFramework\App\State $appState */
-        $appState = $this->objectManager->get('Magento\TestFramework\App\State');
+        $appState = $this->objectManager->get(\Magento\TestFramework\App\State::class);
         $this->origMode = $appState->getMode();
         $appState->setMode(AppState::MODE_DEFAULT);
         /** @var \Magento\Framework\Filesystem $filesystem */
-        $filesystem = Bootstrap::getObjectManager()->get('Magento\Framework\Filesystem');
+        $filesystem = Bootstrap::getObjectManager()->get(\Magento\Framework\Filesystem::class);
         $this->staticDir = $filesystem->getDirectoryWrite(DirectoryList::STATIC_VIEW);
     }
 
@@ -59,7 +60,7 @@ class MinifierTest extends \PHPUnit_Framework_TestCase
     protected function tearDown()
     {
         /** @var \Magento\TestFramework\App\State $appState */
-        $appState = $this->objectManager->get('Magento\TestFramework\App\State');
+        $appState = $this->objectManager->get(\Magento\TestFramework\App\State::class);
         $appState->setMode($this->origMode);
         if ($this->staticDir->isExist('frontend/FrameworkViewMinifier')) {
             $this->staticDir->delete('frontend/FrameworkViewMinifier');
@@ -118,11 +119,11 @@ class MinifierTest extends \PHPUnit_Framework_TestCase
     protected function _testCssMinification($requestedUri, $assertionCallback)
     {
         /** @var \Magento\Framework\App\Request\Http $request */
-        $request = $this->objectManager->get('Magento\Framework\App\Request\Http');
+        $request = $this->objectManager->get(\Magento\Framework\App\Request\Http::class);
         $request->setRequestUri($requestedUri);
         $request->setParam('resource', $requestedUri);
 
-        $response = $this->getMockBuilder('Magento\Framework\App\Response\FileInterface')
+        $response = $this->getMockBuilder(\Magento\Framework\App\Response\FileInterface::class)
             ->setMethods(['setFilePath'])
             ->getMockForAbstractClass();
         $response
@@ -132,50 +133,51 @@ class MinifierTest extends \PHPUnit_Framework_TestCase
 
         /** @var \Magento\Framework\App\StaticResource $staticResourceApp */
         $staticResourceApp = $this->objectManager->create(
-            'Magento\Framework\App\StaticResource',
+            \Magento\Framework\App\StaticResource::class,
             ['response' => $response]
         );
         $staticResourceApp->launch();
     }
 
     /**
-     * @magentoConfigFixture current_store dev/css/minify_files 1
+     * @magentoConfigFixture current_store dev/css/minify_files 0
+     * @magentoAppIsolation enabled
      */
-    public function testCssMinification()
+    public function testCssMinificationOff()
     {
         $this->_testCssMinification(
-            '/frontend/FrameworkViewMinifier/default/en_US/css/styles.min.css',
+            '/frontend/FrameworkViewMinifier/default/en_US/css/styles.css',
             function ($path) {
-                $this->assertEquals(
+                $content = file_get_contents($path);
+                $this->assertNotEmpty($content);
+                $this->assertContains('FrameworkViewMinifier/frontend', $content);
+                $this->assertNotEquals(
                     file_get_contents(
                         dirname(__DIR__)
                         . '/_files/static/expected/styles.magento.min.css'
                     ),
-                    file_get_contents($path),
-                    'Minified files are not equal or minification did not work for requested CSS'
+                    $content,
+                    'CSS is minified when minification turned off'
                 );
             }
         );
     }
 
     /**
-     * @magentoConfigFixture current_store dev/css/minify_files 0
+     * @magentoConfigFixture current_store dev/css/minify_files 1
      */
-    public function testCssMinificationOff()
+    public function testCssMinification()
     {
         $this->_testCssMinification(
-            '/frontend/FrameworkViewMinifier/default/en_US/css/styles.css',
+            '/frontend/FrameworkViewMinifier/default/en_US/css/styles.min.css',
             function ($path) {
-                $content = file_get_contents($path);
-                $this->assertNotEmpty($content);
-                $this->assertContains('FrameworkViewMinifier/frontend', $content);
-                $this->assertNotEquals(
+                $this->assertEquals(
                     file_get_contents(
                         dirname(__DIR__)
                         . '/_files/static/expected/styles.magento.min.css'
                     ),
-                    $content,
-                    'CSS is minified when minification turned off'
+                    file_get_contents($path),
+                    'Minified files are not equal or minification did not work for requested CSS'
                 );
             }
         );
@@ -207,16 +209,16 @@ class MinifierTest extends \PHPUnit_Framework_TestCase
         $fileToBePublished = $staticPath . '/frontend/FrameworkViewMinifier/default/en_US/css/styles.min.css';
         $fileToTestPublishing = dirname(__DIR__) . '/_files/static/theme/web/css/styles.css';
 
-        $omFactory = $this->getMock('\Magento\Framework\App\ObjectManagerFactory', ['create'], [], '', false);
+        $omFactory = $this->getMock(\Magento\Framework\App\ObjectManagerFactory::class, ['create'], [], '', false);
         $omFactory->expects($this->any())
             ->method('create')
             ->will($this->returnValue($this->objectManager));
 
         $output = $this->objectManager->create(
-            'Symfony\Component\Console\Output\ConsoleOutput'
+            \Symfony\Component\Console\Output\ConsoleOutput::class
         );
 
-        $filesUtil = $this->getMock('\Magento\Framework\App\Utility\Files', [], [], '', false);
+        $filesUtil = $this->getMock(\Magento\Framework\App\Utility\Files::class, [], [], '', false);
         $filesUtil->expects($this->any())
             ->method('getStaticLibraryFiles')
             ->will($this->returnValue([]));
@@ -233,13 +235,13 @@ class MinifierTest extends \PHPUnit_Framework_TestCase
                 ]
             ));
 
-        /** @var \Magento\Deploy\Model\Deployer $deployer */
+        /** @var \Magento\Deploy\Model\Deploy\LocaleDeploy $deployer */
         $deployer = $this->objectManager->create(
-            'Magento\Deploy\Model\Deployer',
-            ['filesUtil' => $filesUtil, 'output' => $output, 'isDryRun' => false]
+            \Magento\Deploy\Model\Deploy\LocaleDeploy::class,
+            ['filesUtil' => $filesUtil, 'output' => $output]
         );
 
-        $deployer->deploy($omFactory, ['en_US']);
+        $deployer->deploy('frontend', 'FrameworkViewMinifier/default', 'en_US', []);
 
         $this->assertFileExists($fileToBePublished);
         $this->assertEquals(
diff --git a/vendor/magento/framework/App/Config/ScopePool.php b/vendor/magento/framework/App/Config/ScopePool.php
index d366349..9e6a47d 100644
--- a/vendor/magento/framework/App/Config/ScopePool.php
+++ b/vendor/magento/framework/App/Config/ScopePool.php
@@ -92,16 +92,18 @@ class ScopePool
     {
         $scopeCode = $this->_getScopeCode($scopeType, $scopeCode);
 
-        // Key by url to support dynamic {{base_url}} and port assignments
-        $host = $this->getRequest()->getHttpHost();
-        $port = $this->getRequest()->getServer('SERVER_PORT');
-        $path = $this->getRequest()->getBasePath();
-        $urlInfo = $host . $port . trim($path, '/');
-        $code = $scopeType . '|' . $scopeCode . '|' . $urlInfo;
+        $code = $scopeType . '|' . $scopeCode;
 
         if (!isset($this->_scopes[$code])) {
-            $cacheKey = $this->_cacheId . '|' . $code;
+            // Key by url to support dynamic {{base_url}} and port assignments
+            $host = $this->getRequest()->getHttpHost();
+            $port = $this->getRequest()->getServer('SERVER_PORT');
+            $path = $this->getRequest()->getBasePath();
+
+            $urlInfo = $host . $port . trim($path, '/');
+            $cacheKey = $this->_cacheId . '|' . $code . '|' . $urlInfo;
             $data = $this->_cache->load($cacheKey);
+
             if ($data) {
                 $data = unserialize($data);
             } else {
diff --git a/vendor/magento/framework/App/ResourceConnection.php b/vendor/magento/framework/App/ResourceConnection.php
index 5a2e4a6..d41a457 100644
--- a/vendor/magento/framework/App/ResourceConnection.php
+++ b/vendor/magento/framework/App/ResourceConnection.php
@@ -93,6 +93,18 @@ class ResourceConnection
     }
 
     /**
+     * @param string $resourceName
+     * @return void
+     */
+    public function closeConnection($resourceName = self::DEFAULT_CONNECTION)
+    {
+        $processConnectionName = $this->getProcessConnectionName($this->config->getConnectionName($resourceName));
+        if (isset($this->connections[$processConnectionName])) {
+            $this->connections[$processConnectionName] = null;
+        }
+    }
+
+    /**
      * Retrieve connection by $connectionName
      *
      * @param string $connectionName
@@ -101,8 +113,9 @@ class ResourceConnection
      */
     public function getConnectionByName($connectionName)
     {
-        if (isset($this->connections[$connectionName])) {
-            return $this->connections[$connectionName];
+        $processConnectionName = $this->getProcessConnectionName($connectionName);
+        if (isset($this->connections[$processConnectionName])) {
+            return $this->connections[$processConnectionName];
         }
 
         $connectionConfig = $this->deploymentConfig->get(
@@ -115,11 +128,20 @@ class ResourceConnection
             throw new \DomainException('Connection "' . $connectionName . '" is not defined');
         }
 
-        $this->connections[$connectionName] = $connection;
+        $this->connections[$processConnectionName] = $connection;
         return $connection;
     }
 
     /**
+     * @param string $connectionName
+     * @return string
+     */
+    private function getProcessConnectionName($connectionName)
+    {
+        return  $connectionName . '_process_' . getmypid();
+    }
+
+    /**
      * Get resource table name, validated by db adapter
      *
      * @param   string|string[] $modelEntity
diff --git a/vendor/magento/framework/Css/PreProcessor/Adapter/Less/Processor.php b/vendor/magento/framework/Css/PreProcessor/Adapter/Less/Processor.php
index 6387ac4..7883586 100644
--- a/vendor/magento/framework/Css/PreProcessor/Adapter/Less/Processor.php
+++ b/vendor/magento/framework/Css/PreProcessor/Adapter/Less/Processor.php
@@ -16,6 +16,7 @@ use Magento\Framework\View\Asset\ContentProcessorInterface;
 
 /**
  * Class Processor
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class Processor implements ContentProcessorInterface
 {
@@ -81,9 +82,11 @@ class Processor implements ContentProcessorInterface
             }
 
             $tmpFilePath = $this->temporaryFile->createFile($path, $content);
-            $parser->parseFile($tmpFilePath, '');
 
+            gc_disable();
+            $parser->parseFile($tmpFilePath, '');
             $content = $parser->getCss();
+            gc_enable();
 
             if (trim($content) === '') {
                 $errorMessage = PHP_EOL . self::ERROR_MESSAGE_PREFIX . PHP_EOL . $path;
diff --git a/vendor/magento/framework/Css/PreProcessor/Instruction/MagentoImport.php b/vendor/magento/framework/Css/PreProcessor/Instruction/MagentoImport.php
index a07c7ee..ab5db00 100644
--- a/vendor/magento/framework/Css/PreProcessor/Instruction/MagentoImport.php
+++ b/vendor/magento/framework/Css/PreProcessor/Instruction/MagentoImport.php
@@ -5,15 +5,18 @@
  */
 namespace Magento\Framework\Css\PreProcessor\Instruction;
 
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\Css\PreProcessor\ErrorHandlerInterface;
 use Magento\Framework\View\Asset\File\FallbackContext;
 use Magento\Framework\View\Asset\LocalInterface;
 use Magento\Framework\View\Asset\PreProcessorInterface;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
 use Magento\Framework\View\DesignInterface;
 use Magento\Framework\View\File\CollectorInterface;
 
 /**
  * @magento_import instruction preprocessor
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects) Must be deleted after moving themeProvider to construct
  */
 class MagentoImport implements PreProcessorInterface
 {
@@ -45,10 +48,16 @@ class MagentoImport implements PreProcessorInterface
 
     /**
      * @var \Magento\Framework\View\Design\Theme\ListInterface
+     * @deprecated
      */
     protected $themeList;
 
     /**
+     * @var ThemeProviderInterface
+     */
+    private $themeProvider;
+
+    /**
      * @param DesignInterface $design
      * @param CollectorInterface $fileSource
      * @param ErrorHandlerInterface $errorHandler
@@ -120,8 +129,23 @@ class MagentoImport implements PreProcessorInterface
     {
         $context = $asset->getContext();
         if ($context instanceof FallbackContext) {
-            return $this->themeList->getThemeByFullPath($context->getAreaCode() . '/' . $context->getThemePath());
+            return $this->getThemeProvider()->getThemeByFullPath(
+                $context->getAreaCode() . '/' . $context->getThemePath()
+            );
         }
         return $this->design->getDesignTheme();
     }
+
+    /**
+     * @return ThemeProviderInterface
+     * @deprecated
+     */
+    private function getThemeProvider()
+    {
+        if (null === $this->themeProvider) {
+            $this->themeProvider = ObjectManager::getInstance()->get(ThemeProviderInterface::class);
+        }
+
+        return $this->themeProvider;
+    }
 }
diff --git a/vendor/magento/framework/Css/Test/Unit/PreProcessor/Instruction/MagentoImportTest.php b/vendor/magento/framework/Css/Test/Unit/PreProcessor/Instruction/MagentoImportTest.php
index ddaec4e..37fa561 100644
--- a/vendor/magento/framework/Css/Test/Unit/PreProcessor/Instruction/MagentoImportTest.php
+++ b/vendor/magento/framework/Css/Test/Unit/PreProcessor/Instruction/MagentoImportTest.php
@@ -8,6 +8,10 @@
 
 namespace Magento\Framework\Css\Test\Unit\PreProcessor\Instruction;
 
+use Magento\Framework\Css\PreProcessor\Instruction\MagentoImport;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
+
 class MagentoImportTest extends \PHPUnit_Framework_TestCase
 {
     /**
@@ -38,7 +42,7 @@ class MagentoImportTest extends \PHPUnit_Framework_TestCase
     /**
      * @var \Magento\Framework\View\Design\Theme\ListInterface|\PHPUnit_Framework_MockObject_MockObject
      */
-    private $themeList;
+    private $themeProvider;
 
     /**
      * @var \Magento\Framework\Css\PreProcessor\Instruction\Import
@@ -55,14 +59,14 @@ class MagentoImportTest extends \PHPUnit_Framework_TestCase
         $this->asset = $this->getMock('\Magento\Framework\View\Asset\File', [], [], '', false);
         $this->asset->expects($this->any())->method('getContentType')->will($this->returnValue('css'));
         $this->assetRepo = $this->getMock('\Magento\Framework\View\Asset\Repository', [], [], '', false);
-        $this->themeList = $this->getMockForAbstractClass('\Magento\Framework\View\Design\Theme\ListInterface');
-        $this->object = new \Magento\Framework\Css\PreProcessor\Instruction\MagentoImport(
-            $this->design,
-            $this->fileSource,
-            $this->errorHandler,
-            $this->assetRepo,
-            $this->themeList
-        );
+        $this->themeProvider = $this->getMock(ThemeProviderInterface::class);
+        $this->object = (new ObjectManager($this))->getObject(MagentoImport::class, [
+            'design' => $this->design,
+            'fileSource' => $this->fileSource,
+            'errorHandler' => $this->errorHandler,
+            'assetRepo' => $this->assetRepo,
+            'themeProvider' => $this->themeProvider
+        ]);
     }
 
     /**
@@ -88,7 +92,7 @@ class MagentoImportTest extends \PHPUnit_Framework_TestCase
             ->will($this->returnValue($relatedAsset));
         $relatedAsset->expects($this->once())->method('getContext')->will($this->returnValue($context));
         $theme = $this->getMockForAbstractClass('\Magento\Framework\View\Design\ThemeInterface');
-        $this->themeList->expects($this->once())->method('getThemeByFullPath')->will($this->returnValue($theme));
+        $this->themeProvider->expects($this->once())->method('getThemeByFullPath')->will($this->returnValue($theme));
         $files = [];
         foreach ($foundFiles as $file) {
             $fileObject = $this->getMock('Magento\Framework\View\File', [], [], '', false);
diff --git a/vendor/magento/framework/Filesystem/Directory/Write.php b/vendor/magento/framework/Filesystem/Directory/Write.php
index 0a46a17..9d7ac32 100644
--- a/vendor/magento/framework/Filesystem/Directory/Write.php
+++ b/vendor/magento/framework/Filesystem/Directory/Write.php
@@ -143,8 +143,6 @@ class Write extends Read implements WriteInterface
      */
     public function createSymlink($path, $destination, WriteInterface $targetDirectory = null)
     {
-        $this->assertIsFile($path);
-
         $targetDirectory = $targetDirectory ?: $this;
         $parentDirectory = $this->driver->getParentDirectory($destination);
         if (!$targetDirectory->isExist($parentDirectory)) {
diff --git a/vendor/magento/framework/Filesystem/Directory/WriteInterface.php b/vendor/magento/framework/Filesystem/Directory/WriteInterface.php
index 472c54a..3fa0513 100644
--- a/vendor/magento/framework/Filesystem/Directory/WriteInterface.php
+++ b/vendor/magento/framework/Filesystem/Directory/WriteInterface.php
@@ -48,7 +48,7 @@ interface WriteInterface extends ReadInterface
     public function copyFile($path, $destination, WriteInterface $targetDirectory = null);
 
     /**
-     * Creates symlink on a file and places it to destination
+     * Creates symlink on a file or directory and places it to destination
      *
      * @param string $path
      * @param string $destination
diff --git a/vendor/magento/framework/Test/Unit/App/ResourceConnectionTest.php b/vendor/magento/framework/Test/Unit/App/ResourceConnectionTest.php
new file mode 100644
index 0000000..9cbdea9
--- /dev/null
+++ b/vendor/magento/framework/Test/Unit/App/ResourceConnectionTest.php
@@ -0,0 +1,97 @@
+<?php
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Framework\Test\Unit\App;
+
+use Magento\Framework\App\DeploymentConfig;
+use Magento\Framework\App\ResourceConnection;
+use Magento\Framework\Config\ConfigOptionsListConstants;
+use Magento\Framework\Model\ResourceModel\Type\Db\ConnectionFactoryInterface;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+use Magento\Framework\App\ResourceConnection\ConfigInterface;
+
+class ResourceConnectionTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var ResourceConnection
+     */
+    private $unit;
+
+    /**
+     * @var ResourceConnection|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $deploymentConfigMock;
+
+    /**
+     * @var ConnectionFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $connectionFactoryMock;
+
+    /**
+     * @var ObjectManager
+     */
+    private $objectManager;
+
+    /**
+     * @var ConfigInterface|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $configMock;
+
+    protected function setUp()
+    {
+        $this->deploymentConfigMock = $this->getMockBuilder(DeploymentConfig::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $this->connectionFactoryMock = $this->getMockBuilder(ConnectionFactoryInterface::class)
+            ->getMock();
+
+        $this->configMock = $this->getMockBuilder(ConfigInterface::class)->getMock();
+
+        $this->objectManager = (new ObjectManager($this));
+        $this->unit = $this->objectManager->getObject(
+            ResourceConnection::class,
+            [
+                'deploymentConfig' => $this->deploymentConfigMock,
+                'connectionFactory' => $this->connectionFactoryMock,
+                'config' => $this->configMock,
+            ]
+        );
+    }
+
+    public function testGetConnectionByName()
+    {
+        $this->deploymentConfigMock->expects(self::once())->method('get')
+            ->with(ConfigOptionsListConstants::CONFIG_PATH_DB_CONNECTIONS  . '/default')
+            ->willReturn(['config']);
+        $this->connectionFactoryMock->expects(self::once())->method('create')
+            ->with(['config'])
+            ->willReturn('connection');
+
+        self::assertEquals('connection', $this->unit->getConnectionByName('default'));
+    }
+
+    public function testGetExistingConnectionByName()
+    {
+        $unit = $this->objectManager->getObject(
+            ResourceConnection::class,
+            [
+                'deploymentConfig' => $this->deploymentConfigMock,
+                'connections' => ['default_process_' . getmypid() => 'existing_connection']
+            ]
+        );
+        $this->deploymentConfigMock->expects(self::never())->method('get');
+
+        self::assertEquals('existing_connection', $unit->getConnectionByName('default'));
+    }
+
+    public function testCloseConnection()
+    {
+        $this->configMock->expects(self::once())->method('getConnectionName')->with('default');
+
+        $this->unit->closeConnection('default');
+
+    }
+}
diff --git a/vendor/magento/framework/Test/Unit/TranslateTest.php b/vendor/magento/framework/Test/Unit/TranslateTest.php
index 1e33d4f..a3a5fc5 100644
--- a/vendor/magento/framework/Test/Unit/TranslateTest.php
+++ b/vendor/magento/framework/Test/Unit/TranslateTest.php
@@ -170,8 +170,9 @@ class TranslateTest extends \PHPUnit_Framework_TestCase
         ];
         $this->resource->expects($this->any())->method('getTranslationArray')->will($this->returnValue($dbData));
 
-        $this->cache->expects($this->exactly(1))
-            ->method('save');
+        if (!$forceReload) {
+            $this->cache->expects($this->exactly(1))->method('save');
+        }
 
         $this->translate->loadData($area, $forceReload);
 
diff --git a/vendor/magento/framework/Translate.php b/vendor/magento/framework/Translate.php
index 918c1cb..36f6932 100644
--- a/vendor/magento/framework/Translate.php
+++ b/vendor/magento/framework/Translate.php
@@ -181,7 +181,9 @@ class Translate implements \Magento\Framework\TranslateInterface
         $this->_loadPackTranslation();
         $this->_loadDbTranslation();
 
-        $this->_saveCache();
+        if (!$forceReload) {
+            $this->_saveCache();
+        }
 
         return $this;
     }
diff --git a/vendor/magento/framework/View/Asset/Bundle.php b/vendor/magento/framework/View/Asset/Bundle.php
index 002382c..2f0c101 100644
--- a/vendor/magento/framework/View/Asset/Bundle.php
+++ b/vendor/magento/framework/View/Asset/Bundle.php
@@ -26,7 +26,7 @@ class Bundle
      */
     protected $assetsContent = [];
 
-    /** @var  Bundle\Config */
+    /** @var Bundle\ConfigInterface */
     protected $bundleConfig;
 
     /**
@@ -261,6 +261,7 @@ class Bundle
             $assetsParts = reset($parts);
             $context = reset($assetsParts['assets'])->getContext();
             $bundlePath = empty($bundlePath) ? $context->getPath() . Manager::BUNDLE_PATH : $bundlePath;
+            $dir->delete($context->getPath() . DIRECTORY_SEPARATOR . Manager::BUNDLE_JS_DIR);
             $this->fillContent($parts, $context);
         }
 
diff --git a/vendor/magento/framework/View/Asset/Bundle/Config.php b/vendor/magento/framework/View/Asset/Bundle/Config.php
index 21e974f..ebd0a21 100644
--- a/vendor/magento/framework/View/Asset/Bundle/Config.php
+++ b/vendor/magento/framework/View/Asset/Bundle/Config.php
@@ -6,10 +6,12 @@
 
 namespace Magento\Framework\View\Asset\Bundle;
 
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\View;
 use Magento\Framework\View\Asset\Bundle;
 use Magento\Framework\View\Design\Theme\ListInterface;
 use Magento\Framework\View\Asset\File\FallbackContext;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
 
 class Config implements Bundle\ConfigInterface
 {
@@ -31,6 +33,16 @@ class Config implements Bundle\ConfigInterface
     protected $viewConfig;
 
     /**
+     * @var ThemeProviderInterface
+     */
+    private $themeProvider;
+
+    /**
+     * @var \Magento\Framework\Config\View[]
+     */
+    private $config = [];
+
+    /**
      * @param View\ConfigInterface $viewConfig
      * @param ListInterface $themeList
      */
@@ -57,12 +69,17 @@ class Config implements Bundle\ConfigInterface
      */
     public function getConfig(FallbackContext $assetContext)
     {
-        return $this->viewConfig->getViewConfig([
-            'area' => $assetContext->getAreaCode(),
-            'themeModel' => $this->themeList->getThemeByFullPath(
-                $assetContext->getAreaCode() . '/' . $assetContext->getThemePath()
-            )
-        ]);
+        $themePath = $assetContext->getAreaCode() . '/' . $assetContext->getThemePath();
+        if (!isset($this->config[$themePath])) {
+            $this->config[$themePath] = $this->viewConfig->getViewConfig([
+                'area' => $assetContext->getAreaCode(),
+                'themeModel' => $this->getThemeProvider()->getThemeByFullPath(
+                    $themePath
+                )
+            ]);
+        }
+
+        return $this->config[$themePath];
     }
 
     /**
@@ -83,7 +100,20 @@ class Config implements Bundle\ConfigInterface
             case 'MB':
                 return (int)$size * 1024;
             default:
-                return (int)$size / 1024;
+                return (int)($size / 1024);
         }
     }
+
+    /**
+     * @return ThemeProviderInterface
+     * @deprecated
+     */
+    private function getThemeProvider()
+    {
+        if (null === $this->themeProvider) {
+            $this->themeProvider = ObjectManager::getInstance()->get(ThemeProviderInterface::class);
+        }
+
+        return $this->themeProvider;
+    }
 }
diff --git a/vendor/magento/framework/View/Asset/Bundle/Manager.php b/vendor/magento/framework/View/Asset/Bundle/Manager.php
index 9320cef..0b072ed 100644
--- a/vendor/magento/framework/View/Asset/Bundle/Manager.php
+++ b/vendor/magento/framework/View/Asset/Bundle/Manager.php
@@ -18,6 +18,8 @@ use Magento\Framework\App\Filesystem\DirectoryList;
  */
 class Manager
 {
+    const BUNDLE_JS_DIR = 'js/bundle';
+
     const BUNDLE_PATH = '/js/bundle/bundle';
 
     const ASSET_TYPE_JS = 'js';
@@ -177,7 +179,7 @@ class Manager
      */
     public function addAsset(LocalInterface $asset)
     {
-        if (!($this->isValidAsset($asset))) {
+        if (!$this->isValidAsset($asset)) {
             return false;
         }
 
diff --git a/vendor/magento/framework/View/Asset/LockerProcess.php b/vendor/magento/framework/View/Asset/LockerProcess.php
index 01b186a..e893821 100644
--- a/vendor/magento/framework/View/Asset/LockerProcess.php
+++ b/vendor/magento/framework/View/Asset/LockerProcess.php
@@ -9,6 +9,8 @@ use Magento\Framework\Filesystem;
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\Framework\Exception\FileSystemException;
 use Magento\Framework\Filesystem\Directory\WriteInterface;
+use Magento\Framework\App\State;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * Class LockerProcess
@@ -41,6 +43,11 @@ class LockerProcess implements LockerProcessInterface
     private $tmpDirectory;
 
     /**
+     * @var State
+     */
+    private $state;
+
+    /**
      * Constructor
      *
      * @param Filesystem $filesystem
@@ -52,19 +59,21 @@ class LockerProcess implements LockerProcessInterface
 
     /**
      * @inheritdoc
-     * @throws FileSystemException
      */
     public function lockProcess($lockName)
     {
+        if ($this->getState()->getMode() == State::MODE_PRODUCTION) {
+            return;
+        }
+
         $this->tmpDirectory = $this->filesystem->getDirectoryWrite(DirectoryList::VAR_DIR);
         $this->lockFilePath = $this->getFilePath($lockName);
 
         while ($this->isProcessLocked()) {
-            sleep(1);
+            usleep(1000);
         }
 
         $this->tmpDirectory->writeFile($this->lockFilePath, time());
-
     }
 
     /**
@@ -73,6 +82,10 @@ class LockerProcess implements LockerProcessInterface
      */
     public function unlockProcess()
     {
+        if ($this->getState()->getMode() == State::MODE_PRODUCTION) {
+            return ;
+        }
+
         $this->tmpDirectory->delete($this->lockFilePath);
     }
 
@@ -80,14 +93,18 @@ class LockerProcess implements LockerProcessInterface
      * Check whether generation process has already locked
      *
      * @return bool
-     * @throws FileSystemException
      */
     private function isProcessLocked()
     {
         if ($this->tmpDirectory->isExist($this->lockFilePath)) {
-            $lockTime = (int) $this->tmpDirectory->readFile($this->lockFilePath);
-            if ((time() - $lockTime) >= self::MAX_LOCK_TIME) {
-                $this->tmpDirectory->delete($this->lockFilePath);
+            try {
+                $lockTime = (int)$this->tmpDirectory->readFile($this->lockFilePath);
+                if ((time() - $lockTime) >= self::MAX_LOCK_TIME) {
+                    $this->tmpDirectory->delete($this->lockFilePath);
+
+                    return false;
+                }
+            } catch (FileSystemException $e) {
 
                 return false;
             }
@@ -108,4 +125,16 @@ class LockerProcess implements LockerProcessInterface
     {
         return DirectoryList::TMP . DIRECTORY_SEPARATOR . $name . self::LOCK_EXTENSION;
     }
+
+    /**
+     * @return State
+     * @deprecated
+     */
+    private function getState()
+    {
+        if (null === $this->state) {
+            $this->state = ObjectManager::getInstance()->get(State::class);
+        }
+        return $this->state;
+    }
 }
diff --git a/vendor/magento/framework/View/Asset/Minification.php b/vendor/magento/framework/View/Asset/Minification.php
index 255c969..1e32e32b 100644
--- a/vendor/magento/framework/View/Asset/Minification.php
+++ b/vendor/magento/framework/View/Asset/Minification.php
@@ -21,18 +21,21 @@ class Minification
      * @var ScopeConfigInterface
      */
     private $scopeConfig;
+
     /**
      * @var State
      */
     private $appState;
+
     /**
      * @var string
      */
     private $scope;
+
     /**
      * @var array
      */
-    private $excludes = [];
+    private $configCache = [];
 
     /**
      * @param ScopeConfigInterface $scopeConfig
@@ -54,12 +57,16 @@ class Minification
      */
     public function isEnabled($contentType)
     {
-        return
-            $this->appState->getMode() != State::MODE_DEVELOPER &&
-            (bool)$this->scopeConfig->isSetFlag(
-                sprintf(self::XML_PATH_MINIFICATION_ENABLED, $contentType),
-                $this->scope
-            );
+        if (!isset($this->configCache[self::XML_PATH_MINIFICATION_ENABLED][$contentType])) {
+            $this->configCache[self::XML_PATH_MINIFICATION_ENABLED][$contentType] =
+                $this->appState->getMode() != State::MODE_DEVELOPER &&
+                (bool)$this->scopeConfig->isSetFlag(
+                    sprintf(self::XML_PATH_MINIFICATION_ENABLED, $contentType),
+                    $this->scope
+                );
+        }
+
+        return $this->configCache[self::XML_PATH_MINIFICATION_ENABLED][$contentType];
     }
 
     /**
@@ -131,15 +138,15 @@ class Minification
      */
     public function getExcludes($contentType)
     {
-        if (!isset($this->excludes[$contentType])) {
-            $this->excludes[$contentType] = [];
+        if (!isset($this->configCache[self::XML_PATH_MINIFICATION_EXCLUDES][$contentType])) {
+            $this->configCache[self::XML_PATH_MINIFICATION_EXCLUDES][$contentType] = [];
             $key = sprintf(self::XML_PATH_MINIFICATION_EXCLUDES, $contentType);
             foreach (explode("\n", $this->scopeConfig->getValue($key, $this->scope)) as $exclude) {
                 if (trim($exclude) != '') {
-                    $this->excludes[$contentType][] = trim($exclude);
+                    $this->configCache[self::XML_PATH_MINIFICATION_EXCLUDES][$contentType][] = trim($exclude);
                 }
             };
         }
-        return $this->excludes[$contentType];
+        return $this->configCache[self::XML_PATH_MINIFICATION_EXCLUDES][$contentType];
     }
 }
diff --git a/vendor/magento/framework/View/Asset/Repository.php b/vendor/magento/framework/View/Asset/Repository.php
index 072b336..3e56b9e 100644
--- a/vendor/magento/framework/View/Asset/Repository.php
+++ b/vendor/magento/framework/View/Asset/Repository.php
@@ -8,7 +8,8 @@ namespace Magento\Framework\View\Asset;
 
 use Magento\Framework\UrlInterface;
 use Magento\Framework\App\Filesystem\DirectoryList;
-use Magento\Framework\Filesystem;
+use Magento\Framework\App\ObjectManager;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
 
 /**
  * A repository service for view assets
@@ -35,6 +36,7 @@ class Repository
 
     /**
      * @var \Magento\Framework\View\Design\Theme\ListInterface
+     * @deprecated
      */
     private $themeList;
 
@@ -72,12 +74,18 @@ class Repository
      * @var File\ContextFactory
      */
     private $contextFactory;
+
     /**
      * @var RemoteFactory
      */
     private $remoteFactory;
 
     /**
+     * @var ThemeProviderInterface
+     */
+    private $themeProvider;
+
+    /**
      * @param \Magento\Framework\UrlInterface $baseUrl
      * @param \Magento\Framework\View\DesignInterface $design
      * @param \Magento\Framework\View\Design\Theme\ListInterface $themeList
@@ -138,7 +146,7 @@ class Repository
         }
 
         if ($theme) {
-            $params['themeModel'] = $this->themeList->getThemeByFullPath($area . '/' . $theme);
+            $params['themeModel'] = $this->getThemeProvider()->getThemeByFullPath($area . '/' . $theme);
             if (!$params['themeModel']) {
                 throw new \UnexpectedValueException("Could not find theme '$theme' for area '$area'");
             }
@@ -159,6 +167,19 @@ class Repository
     }
 
     /**
+     * @return ThemeProviderInterface
+     * @deprecated
+     */
+    private function getThemeProvider()
+    {
+        if (null === $this->themeProvider) {
+            $this->themeProvider = ObjectManager::getInstance()->get(ThemeProviderInterface::class);
+        }
+
+        return $this->themeProvider;
+    }
+
+    /**
      * Get default design parameter
      *
      * @param string $name
diff --git a/vendor/magento/framework/View/Asset/Source.php b/vendor/magento/framework/View/Asset/Source.php
index a2dced1..f2da170 100644
--- a/vendor/magento/framework/View/Asset/Source.php
+++ b/vendor/magento/framework/View/Asset/Source.php
@@ -8,8 +8,10 @@ namespace Magento\Framework\View\Asset;
 
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\Framework\Filesystem\Directory\ReadFactory;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\View\Asset\PreProcessor\ChainFactoryInterface;
 use Magento\Framework\View\Design\FileResolution\Fallback\Resolver\Simple;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
 
 /**
  * A service for preprocessing content of assets
@@ -45,6 +47,7 @@ class Source
 
     /**
      * @var \Magento\Framework\View\Design\Theme\ListInterface
+     * @deprecated
      */
     private $themeList;
 
@@ -59,6 +62,11 @@ class Source
     private $readFactory;
 
     /**
+     * @var ThemeProviderInterface
+     */
+    private $themeProvider;
+
+    /**
      * Constructor
      *
      * @param \Magento\Framework\Filesystem $filesystem
@@ -208,7 +216,9 @@ class Source
         LocalInterface $asset,
         \Magento\Framework\View\Asset\File\FallbackContext $context
     ) {
-        $themeModel = $this->themeList->getThemeByFullPath($context->getAreaCode() . '/' . $context->getThemePath());
+        $themeModel = $this->getThemeProvider()->getThemeByFullPath(
+            $context->getAreaCode() . '/' . $context->getThemePath()
+        );
         $sourceFile = $this->fallback->getFile(
             $context->getAreaCode(),
             $themeModel,
@@ -220,6 +230,19 @@ class Source
     }
 
     /**
+     * @return ThemeProviderInterface
+     * @deprecated
+     */
+    private function getThemeProvider()
+    {
+        if (null === $this->themeProvider) {
+            $this->themeProvider = ObjectManager::getInstance()->get(ThemeProviderInterface::class);
+        }
+
+        return $this->themeProvider;
+    }
+
+    /**
      * Find asset file by simply appending its path to the directory in context
      *
      * @param LocalInterface $asset
diff --git a/vendor/magento/framework/View/Test/Unit/Asset/BundleTest.php b/vendor/magento/framework/View/Test/Unit/Asset/BundleTest.php
index 8b1cdbb..8bfc7ba 100644
--- a/vendor/magento/framework/View/Test/Unit/Asset/BundleTest.php
+++ b/vendor/magento/framework/View/Test/Unit/Asset/BundleTest.php
@@ -68,12 +68,12 @@ class BundleTest extends \PHPUnit_Framework_TestCase
             ->withConsecutive(
                 ['onefile.js'],
                 ['onefile.js'],
-                ['/js/bundle/bundle0.js']
+                ['path-to-theme/js/bundle/bundle0.js']
             )
             ->willReturnOnConsecutiveCalls(
                 'onefile.min.js',
                 'onefile.min.js',
-                '/js/bundle/bundle0.min.js'
+                'path-to-theme/js/bundle/bundle0.min.js'
             );
 
         $contextMock = $this->getMockBuilder('Magento\Framework\View\Asset\File\FallbackContext')
@@ -91,6 +91,10 @@ class BundleTest extends \PHPUnit_Framework_TestCase
             ->expects($this->any())
             ->method('getLocale')
             ->willReturn('locale');
+        $contextMock
+            ->expects($this->any())
+            ->method('getPath')
+            ->willReturn('path-to-theme');
 
         $assetMock = $this->getMockBuilder('Magento\Framework\View\Asset\LocalInterface')
             ->setMethods(['getContentType', 'getContext'])
@@ -112,8 +116,12 @@ class BundleTest extends \PHPUnit_Framework_TestCase
             ->getMockForAbstractClass();
         $writeMock
             ->expects($this->once())
+            ->method('delete')
+            ->with('path-to-theme' . DIRECTORY_SEPARATOR . \Magento\Framework\View\Asset\Bundle\Manager::BUNDLE_JS_DIR);
+        $writeMock
+            ->expects($this->once())
             ->method('writeFile')
-            ->with('/js/bundle/bundle0.min.js', $this->stringContains('onefile.min.js'));
+            ->with('path-to-theme/js/bundle/bundle0.min.js', $this->stringContains('onefile.min.js'));
 
         $this->filesystemMock
             ->expects($this->any())
diff --git a/vendor/magento/framework/View/Test/Unit/Asset/LockerProcessTest.php b/vendor/magento/framework/View/Test/Unit/Asset/LockerProcessTest.php
index 91666d0..53527dc 100644
--- a/vendor/magento/framework/View/Test/Unit/Asset/LockerProcessTest.php
+++ b/vendor/magento/framework/View/Test/Unit/Asset/LockerProcessTest.php
@@ -9,6 +9,8 @@ use Magento\Framework\Filesystem;
 use Magento\Framework\View\Asset\LockerProcess;
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\Framework\Filesystem\Directory\WriteInterface;
+use Magento\Framework\App\State;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
 
 /**
  * Class LockerProcessTest
@@ -35,6 +37,11 @@ class LockerProcessTest extends \PHPUnit_Framework_TestCase
     private $filesystemMock;
 
     /**
+     * @var State|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $stateMock;
+
+    /**
      * Set up
      */
     protected function setUp()
@@ -44,8 +51,17 @@ class LockerProcessTest extends \PHPUnit_Framework_TestCase
         $this->filesystemMock = $this->getMockBuilder('Magento\Framework\Filesystem')
             ->disableOriginalConstructor()
             ->getMock();
+        $this->stateMock = $this->getMockBuilder(State::class)
+            ->disableOriginalConstructor()
+            ->getMock();
 
-        $this->lockerProcess = new LockerProcess($this->filesystemMock);
+        $this->lockerProcess = (new ObjectManager($this))->getObject(
+            LockerProcess::class,
+            [
+                'filesystem' => $this->filesystemMock,
+                'state' => $this->stateMock,
+            ]
+        );
     }
 
     /**
@@ -57,6 +73,7 @@ class LockerProcessTest extends \PHPUnit_Framework_TestCase
      */
     public function testLockProcess($method)
     {
+        $this->stateMock->expects(self::once())->method('getMode')->willReturn(State::MODE_DEVELOPER);
         $this->filesystemMock->expects(self::once())
             ->method('getDirectoryWrite')
             ->with(DirectoryList::VAR_DIR)
@@ -65,11 +82,20 @@ class LockerProcessTest extends \PHPUnit_Framework_TestCase
         $this->lockerProcess->lockProcess(self::LOCK_NAME);
     }
 
+    public function testNotLockProcessInProductionMode()
+    {
+        $this->stateMock->expects(self::once())->method('getMode')->willReturn(State::MODE_PRODUCTION);
+        $this->filesystemMock->expects($this->never())->method('getDirectoryWrite');
+
+        $this->lockerProcess->lockProcess(self::LOCK_NAME);
+    }
+
     /**
      * Test for unlockProcess method
      */
     public function testUnlockProcess()
     {
+        $this->stateMock->expects(self::exactly(2))->method('getMode')->willReturn(State::MODE_DEVELOPER);
         $this->filesystemMock->expects(self::once())
             ->method('getDirectoryWrite')
             ->with(DirectoryList::VAR_DIR)
@@ -79,6 +105,15 @@ class LockerProcessTest extends \PHPUnit_Framework_TestCase
         $this->lockerProcess->unlockProcess();
     }
 
+    public function testNotUnlockProcessInProductionMode()
+    {
+        $this->stateMock->expects(self::exactly(2))->method('getMode')->willReturn(State::MODE_PRODUCTION);
+        $this->filesystemMock->expects(self::never())->method('getDirectoryWrite');
+
+        $this->lockerProcess->lockProcess(self::LOCK_NAME);
+        $this->lockerProcess->unlockProcess();
+    }
+
     /**
      * @return array
      */
diff --git a/vendor/magento/framework/View/Test/Unit/Asset/RepositoryTest.php b/vendor/magento/framework/View/Test/Unit/Asset/RepositoryTest.php
index cadb00c..550d782 100644
--- a/vendor/magento/framework/View/Test/Unit/Asset/RepositoryTest.php
+++ b/vendor/magento/framework/View/Test/Unit/Asset/RepositoryTest.php
@@ -6,7 +6,9 @@
 
 namespace Magento\Framework\View\Test\Unit\Asset;
 
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
 use Magento\Framework\View\Asset\Repository;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
 
 /**
  * Unit test for Magento\Framework\View\Asset\Repository
@@ -31,7 +33,7 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
     /**
      * @var \Magento\Framework\View\Design\Theme\ListInterface|\PHPUnit_Framework_MockObject_MockObject
      */
-    private $listMock;
+    private $themeProvider;
 
     /**
      * @var \Magento\Framework\View\Asset\Source|\PHPUnit_Framework_MockObject_MockObject
@@ -74,7 +76,7 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
         $this->designMock = $this->getMockBuilder('Magento\Framework\View\DesignInterface')
             ->disableOriginalConstructor()
             ->getMock();
-        $this->listMock = $this->getMockBuilder('Magento\Framework\View\Design\Theme\ListInterface')
+        $this->themeProvider = $this->getMockBuilder(ThemeProviderInterface::class)
             ->disableOriginalConstructor()
             ->getMock();
         $this->sourceMock = $this->getMockBuilder('Magento\Framework\View\Asset\Source')
@@ -99,17 +101,17 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
             ->disableOriginalConstructor()
             ->getMock();
 
-        $this->repository = new Repository(
-            $this->urlMock,
-            $this->designMock,
-            $this->listMock,
-            $this->sourceMock,
-            $this->httpMock,
-            $this->fileFactoryMock,
-            $this->fallbackFactoryMock,
-            $this->contextFactoryMock,
-            $this->remoteFactoryMock
-        );
+        $this->repository = (new ObjectManager($this))->getObject(Repository::class, [
+            'baseUrl' => $this->urlMock,
+            'design' => $this->designMock,
+            'themeProvider' => $this->themeProvider,
+            'assetSource' => $this->sourceMock,
+            'request' => $this->httpMock,
+            'fileFactory' => $this->fileFactoryMock,
+            'fallbackContextFactory' => $this->fallbackFactoryMock,
+            'contextFactory' => $this->contextFactoryMock,
+            'remoteFactory' => $this->remoteFactoryMock
+        ]);
     }
 
     /**
@@ -120,7 +122,7 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
     public function testUpdateDesignParamsWrongTheme()
     {
         $params = ['area' => 'area', 'theme' => 'nonexistent_theme'];
-        $this->listMock->expects($this->once())
+        $this->themeProvider->expects($this->once())
             ->method('getThemeByFullPath')
             ->with('area/nonexistent_theme')
             ->will($this->returnValue(null));
@@ -135,7 +137,7 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
      */
     public function testUpdateDesignParams($params, $result)
     {
-        $this->listMock
+        $this->themeProvider
             ->expects($this->any())
             ->method('getThemeByFullPath')
             ->willReturn('ThemeID');
@@ -165,7 +167,7 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
      */
     public function testCreateAsset()
     {
-        $this->listMock
+        $this->themeProvider
             ->expects($this->any())
             ->method('getThemeByFullPath')
             ->willReturnArgument(0);
@@ -227,7 +229,7 @@ class RepositoryTest extends \PHPUnit_Framework_TestCase
                     'locale' => 'locale'
                 ]
             );
-        $this->listMock
+        $this->themeProvider
             ->expects($this->any())
             ->method('getThemeByFullPath')
             ->willReturnArgument(0);
diff --git a/vendor/magento/framework/View/Test/Unit/Asset/SourceTest.php b/vendor/magento/framework/View/Test/Unit/Asset/SourceTest.php
index 99e4b76..877c863 100644
--- a/vendor/magento/framework/View/Test/Unit/Asset/SourceTest.php
+++ b/vendor/magento/framework/View/Test/Unit/Asset/SourceTest.php
@@ -10,9 +10,11 @@ namespace Magento\Framework\View\Test\Unit\Asset;
 
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\Framework\Filesystem\DriverPool;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
 use Magento\Framework\View\Asset\PreProcessor\ChainFactoryInterface;
 use Magento\Framework\View\Asset\PreProcessor\Chain;
 use Magento\Framework\View\Asset\Source;
+use Magento\Framework\View\Design\Theme\ThemeProviderInterface;
 
 /**
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -95,8 +97,8 @@ class SourceTest extends \PHPUnit_Framework_TestCase
             ->method('create')
             ->willReturn($this->chain);
 
-        $themeList = $this->getMockForAbstractClass('Magento\Framework\View\Design\Theme\ListInterface');
-        $themeList->expects($this->any())
+        $themeProvider = $this->getMock(ThemeProviderInterface::class);
+        $themeProvider->expects($this->any())
             ->method('getThemeByFullPath')
             ->with('frontend/magento_theme')
             ->willReturn($this->theme);
@@ -105,14 +107,14 @@ class SourceTest extends \PHPUnit_Framework_TestCase
 
         $this->initFilesystem();
 
-        $this->object = new Source(
-            $this->filesystem,
-            $this->readFactory,
-            $this->preProcessorPool,
-            $this->viewFileResolution,
-            $themeList,
-            $this->chainFactory
-        );
+        $this->object = (new ObjectManager($this))->getObject(Source::class, [
+            'filesystem' => $this->filesystem,
+            'readFactory' => $this->readFactory,
+            'preProcessorPool' => $this->preProcessorPool,
+            'fallback' => $this->viewFileResolution,
+            'themeProvider' => $themeProvider,
+            'chainFactory' => $this->chainFactory
+        ]);
     }
 
     /**
