<?php

namespace Magento\MagentoCloud\App\Logger;;

use Magento\MagentoCloud\App\ErrorInfo;
use Monolog\Formatter\LineFormatter;

/**
 *
 */
class ErrorLineFormatter extends LineFormatter
{
    public const FORMAT_BASE = "[%datetime%] %level_name%: %message% %extra%\n";
    public const FORMAT_ERROR_CODE = "[%datetime%] %level_name%: [%context.errorCode%] %message% \nStage: %context.stage% \n";

    /**
     * @var ErrorInfo
     */
    private $errorInfo;

    /**
     * @param string $format The format of the message
     * @param string $dateFormat The format of the timestamp: one supported by DateTime::format
     * @param bool $allowInlineLineBreaks Whether to allow inline line breaks in log entries
     * @param bool $ignoreEmptyContextAndExtra
     * @param ErrorInfo|null $errorInfo
     */
    public function __construct(
        $format = null,
        $dateFormat = null,
        $allowInlineLineBreaks = false,
        $ignoreEmptyContextAndExtra = false,
        ErrorInfo $errorInfo = null
    ) {
        parent::__construct($format, $dateFormat, $allowInlineLineBreaks, $ignoreEmptyContextAndExtra);

        $this->errorInfo = $errorInfo;
    }


    public function format(array $record)
    {
        if (isset($record['context']['errorCode'])) {
            $errorCode = $record['context']['errorCode'];

            $this->format = self::FORMAT_ERROR_CODE;

            $errorInfo = $this->errorInfo->get($errorCode);
            $record['context'] = array_merge($record['context'], $errorInfo);

            if (empty($record['message']) && !empty($errorInfo['title'])) {
                $record['message'] = $errorInfo['title'];
            }

            if (isset($record['context']['suggestion'])) {
                $this->format .= "Suggestion: %context.suggestion% \n";
            }
        }

        return parent::format($record); // TODO: Change the autogenerated stub
    }
}
